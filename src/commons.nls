;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Fonctions diverses communes aux différents agents ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Rotation de l'agent vers sa cible, sans dépasser un angle limite pour garder un certain réalisme
to rotate-agent [ goal ]
  ; Si le drone se trouve à l'endroit souhaité (modulo l'altitude)
  if is-turtle? goal and [xcor] of goal = xcor and [ycor] of goal = ycor or 
  is-patch? goal and [pxcor] of goal = xcor and [pycor] of goal = ycor [
    stop
  ]
  
  ; Calcul de l'angle avec la cible
  let headingFlag (towards-nowrap goal)
  let dirCorrection subtract-headings headingFlag heading
  
  ; Arrondissement de l'angle (on ne veut pas faire de micro tournant)
  set dirCorrection precision dirCorrection 2
  
  ; Limite de l'angle, pour que ce soit plus realiste (l'ennemi ne peut pas faire un demi-tour sur place!)
  ifelse dirCorrection > max-dir [ ; limite a droite
    set dirCorrection max-dir
  ]
  [
    if dirCorrection < max-dir * -1 [ ; limite a gauche
      set dirCorrection max-dir * -1
    ]
  ]
  
  ; On tourne
  rt dirCorrection
end

to-report distance-nowrap-noZAxis [ source target ]
  report [distance-nowrap source] of target - abs ([zcor] of source - [pzcor] of target)
end

to-report detect-convois-in-vision
  let targets convois in-radius-nowrap vision-radius
  let retour []
  foreach sort-on [distance myself] targets
  [
    if abs subtract-headings [heading] of ? heading < vision-angle / 2
    [
      set retour lput ? retour
    ]
  ]
  report retour
end

to-report detect-agent-between-target [target]
  let temp 1
  let headingFlag heading - 40
  while [ headingFlag < heading + 40 ]
  [
    while [ temp < distance target ]
    [
      if any? other turtles-on patch-at-heading-and-distance headingFlag temp [report true]
      set temp temp + 1
    ]
    set headingFlag headingFlag + 10
  ]
  
  ; Si on arrive là c'est qu'on n'avait pas de 
  report false
end

to-report detect-obstacle-between-target [target]
; Vérification qu'on ne va pas dans le vide
  if abs (xcor - [pxcor] of patch-ahead speed) > speed + safe-distance or abs (ycor - [pycor] of patch-ahead speed) > speed + safe-distance
  [ report true ]
  
  let temp 1
  let headingFlag heading - 40
  while [ headingFlag < heading + 40 ]
  [
    while [ temp < distance target ]
    [
      if [obstacle?] of patch-at-heading-and-distance headingFlag temp [report true]
      set temp temp + 1
    ]
    set headingFlag headingFlag + 10
  ]

  ; Si on arrive là c'est qu'on n'avait pas de 
  report false
end

;;;;;;;;;;;;;;;;;;;;
;; Communications ;;
;;;;;;;;;;;;;;;;;;;;

to-report check-message [msg performative content] 
  report msg != "no_message" and get-performative msg = performative and get-content msg = content
end

to-report create-complete-msg [receiver performative content]
  let msg create-message performative
  
  ifelse is-list? receiver
  [ set msg add-multiple-receivers receiver msg ]
  [ set msg add-receiver receiver msg ]
  
  set msg add-content content msg
  report msg
end

to-report create-complete-reply [msg performative content]
  let reply create-reply performative msg
  set reply add-content content reply 
  report reply
end

to-report get-msg-if-performative [performative]
  let msg get-message-no-remove
  if get-performative msg = performative [ report get-message ]
  report nobody
end

;;;;;;;;;;;;;;;;;;;
;; Connaissances ;;
;;;;;;;;;;;;;;;;;;;

;; Structure représentant les connaissances de chaque drones
;; et de chaque convoi concernant leurs alliés
;; ---
;; Liste [Infos-Drones, Infos-Convois]
;; • Info-Drones
;;   Liste [ticks, turtle, position, role, dead?, health, fuel]
;;   o ticks       : Date de l'observation
;;   o turle       : Drone concerné
;;   o position    : Patch où se trouvait le drone
;;   o role        : Role du drone
;;   o dead?       : Etat du drone (vivant / mort)
;;   o health      : Points de vie restants au drone
;;   o fuel        : Carburant restant au drone
;; • Info-Convoi
;;   Liste [ticks, turtle, position, role, dead?, health]
;;   --- Idem, sans le champs "fuel"

;; Fusion de connaissances
to-report update-knowledges-drones [new-knowledges]  
  if get-performative new-knowledges = "knowledge"
  [
    ;; Récupération des connaissances
    let content get-content new-knowledges
    
    ;; Récupération de la liste des croyances sur les drones
    let Infos-Drones K-get-Infos-Drones content
    
    let tick-of-K 0
    
    ;; Pour chaque drone
    foreach Infos-Drones
    [
      ;; Récupération de nos croyance concernant ce drone
      show content
      show new-knowledges
      let current-info-drone K-get-drone K-get-turtle content
      
      let flag false
      ifelse current-info-drone = [] 
      [ set flag true ]
      [ if tick-of-K > K-get-tick current-info-drone [set flag true ] ]
      
      
      
      ;; Vérification de la date des croyances
      set tick-of-K K-get-tick ?
      if flag
      [
        ;; Update
        ifelse current-info-drone = []
        [
          intelligent-update-belief "K-Infos-Drones" lput content intelligent-get-belief "K-Infos-Drones"
        ]
        [
        ]
        
        show (list "Update" ?)
      ]
    ]
    
    ;; Récupération de la liste des croyances sur les convois
    let Infos-Convois K-get-Infos-Convois content
    
    ;; Pour chaque convoi
    foreach Infos-Convois
    [
      ;; Récupération de nos croyance concernant ce drone
      let current-info-convoi K-get-convoi K-get-turtle content
      
      ;; Vérification de la date des croyances
      set tick-of-K K-get-tick ?
      if tick-of-K > K-get-tick current-info-convoi
      [
        ;; Update
      ]
    ]
  ]
  
  report nobody
end

to-report K-get-Infos-Drones  [K] report item 0 K end
to-report K-get-Infos-Convois [K] report item 1 K end

to-report K-get-tick     [K] report item 0 K end
to-report K-get-turtle   [K] report item 1 K end
to-report K-get-position [K] report item 2 K end
to-report K-get-role     [K] report item 3 K end
to-report K-get-health   [K] report item 4 K end
to-report K-get-dead?    [K] report item 5 K end
to-report K-get-fuel     [K] report item 6 K end

to-report K-get-drone  [drone]
  report (filter [member? drone ?]  intelligent-get-belief "K-Infos-Drones")
end

to-report K-get-convoi [convoi]
  report (filter [member? convoi ?] intelligent-get-belief "K-Infos-Convois")
end