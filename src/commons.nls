;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Fonctions diverses communes aux différents agents ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Rotation de l'agent vers sa cible, sans dépasser un angle limite pour garder un certain réalisme
to rotate-agent [ goal ]
  ; Si le drone se trouve à l'endroit souhaité (modulo l'altitude)
  if is-turtle? goal and [xcor] of goal = xcor and [ycor] of goal = ycor or 
  is-patch? goal and [pxcor] of goal = xcor and [pycor] of goal = ycor [
    stop
  ]
  
  ; Calcul de l'angle avec la cible
  let headingFlag (towards-nowrap goal)
  let dirCorrection subtract-headings headingFlag heading
  
  ; Arrondissement de l'angle (on ne veut pas faire de micro tournant)
  set dirCorrection precision dirCorrection 2
  
  ; Limite de l'angle, pour que ce soit plus realiste (l'ennemi ne peut pas faire un demi-tour sur place!)
  ifelse dirCorrection > max-dir [ ; limite a droite
    set dirCorrection max-dir
  ]
  [
    if dirCorrection < max-dir * -1 [ ; limite a gauche
      set dirCorrection max-dir * -1
    ]
  ]
  
  ; On tourne
  rt dirCorrection
end

to-report distance-nowrap-noZAxis [ source target ]
  report [distance-nowrap source] of target - abs ([zcor] of source - [pzcor] of target)
end

;; Revoie un Agentset composé de l'ensemble des convois dans le champ de vision
to-report detect-convois-in-vision
  let targets convois with [dead? = false and hidden? = false] in-radius-nowrap vision-radius
  let retour []
  foreach sort-on [distance myself] targets
  [
    if abs subtract-headings [heading] of ? heading < vision-angle / 2
    [
      set retour lput ? retour
    ]
  ]
  report retour
end

;; Revoie vrai si un agent se trouve sur la trajectoire de deplacement de l'agent
to-report detect-agent-between-target [target]
  let temp 1
  let headingFlag heading - 40
  while [ headingFlag < heading + 40 ]
  [
    while [ temp < distance target ]
    [
      if any? other enemies-on patch-at-heading-and-distance headingFlag temp or any? convois-on patch-at-heading-and-distance headingFlag temp
      [ report true ]
      set temp temp + 1
    ]
    set headingFlag headingFlag + 10
  ]
  
  ; Si on arrive là c'est qu'il n'y avait personne devant
  report false
end

to-report detect-obstacle-between-target [target]
; Vérification qu'on ne va pas dans le vide
  if abs (xcor - [pxcor] of patch-ahead speed) > speed + safe-distance or abs (ycor - [pycor] of patch-ahead speed) > speed + safe-distance
  [ report true ]
  
  let temp speed
  let headingFlag heading - 40
  while [ headingFlag < heading + 40 ]
  [
    while [ temp <= distance target ]
    [
      if [obstacle?] of patch-at-heading-and-distance headingFlag temp [ report true ]
      set temp temp + 1
    ]
    set headingFlag headingFlag + 10
  ]

  ; Si on arrive là c'est qu'on n'avait pas de 
  report false
end

to-report detect-obstacle-between-target-no-angle [target]
; Vérification qu'on ne va pas dans le vide
  if abs (xcor - [pxcor] of patch-ahead speed) > speed + safe-distance or abs (ycor - [pycor] of patch-ahead speed) > speed + safe-distance
  [ report true ]
  
  let temp speed

  while [ temp <= distance target ]
  [
    if [obstacle?] of patch-at-heading-and-distance heading temp [ report true ]
    set temp temp + 1
  ]

  ; Si on arrive là c'est qu'on n'avait pas de 
  report false
end

;;;;;;;;;;;;;;;;;;;;
;; Communications ;;
;;;;;;;;;;;;;;;;;;;;

;; Indique si le message est bien celui qu'on attend...
to-report check-message [msg performative content]
  if content = nobody
  [ report msg != nobody and msg != "no_message" and get-performative msg = performative ]
  report msg != nobody and msg != "no_message" and get-performative msg = performative and get-content msg = content
end

;; Crée un message complet à partir des informations fournies
to-report create-complete-msg [receiver performative content]
  let msg create-message performative
  
  ifelse is-list? receiver
  [ set msg add-multiple-receivers receiver msg ]
  [ set msg add-receiver receiver msg ]
  
  set msg add-content content msg
  report msg
end

;; Crée une réponse complète à un message donné grâce aux informations fournies
to-report create-complete-reply [msg performative content]
  let reply create-reply performative msg
  set reply add-content content reply 
  report reply
end

;; get-msg-if-performative
;; ---
;; Récupère le message seulement si la performative est ce qu'on attend
;; • performative  : la performative souhaitée
to-report get-msg-if-performative [performative]
  let msg get-message-no-remove
  if get-performative msg = performative [ report get-message ]
  report nobody
end

;; remove-msg-if-performative
;; ---
;; Suprime le message seulement si la performative correspond à l'une des performatives données
;; • performatives : La liste des performatives des messages que l'on souhaite supprimer
;; • report        : Renvoie vrai si le message à été supprimée
to-report remove-msg-if-performative [performatives]
  let msg get-message-no-remove
  if member? get-performative msg performatives
  [
    remove-msg
    report true
  ]
  report false
end

;; Envoie un message aux agents de la liste signifiant que l'emetteur est mort tristement
;; • list-of-turtles : liste d'agents récepteurs du message
to i-am-dead [ list-of-turtles ]
  foreach list-of-turtles
  [
    send create-complete-msg ? "Death notification" self
  ]
end

;; observe-enemies
;; ---
;; Observe les ennemis aux alentours
to observe-enemies  
  let enemies-autour enemies with [distance myself <= drones-vision-radius]
  foreach sort enemies-autour
  [
    let K-Infos-Enemies intelligent-get-belief "K-Infos-Enemies"
    let current-enemy K-get-Info-Enemy ?
    ifelse empty? current-enemy
    [
      intelligent-update-belief "K-Infos-Enemies" lput (list "tick" ticks "turtle" ? "position" [patch-here] of ?) intelligent-get-belief "K-Infos-Enemies"
      set K-enemies-updated true
    ]
    [
      if zone-of-path-drones [patch-here] of ? != zone-of-path-drones K-get "position" current-enemy
      or ticks - K-get "tick" current-enemy > 20
      [
        intelligent-update-belief "K-Infos-Enemies" lput (list "tick" ticks "turtle" ? "position" [patch-here] of ?) remove current-enemy intelligent-get-belief "K-Infos-Enemies"
        set K-enemies-updated true
      ]
    ]
  ]
end

;; traite-dead
;; ---
;; Traite les messages concernant morts
;; et vérifie si la target est morte ou non
to traite-dead
  let msg get-msg-if-performative "Death notification"
  while [msg != nobody]
  [
    let sender get-sender msg
    if member? sender convois
    [
      intelligent-update-belief "K-Infos-Convois" remove K-get-Info-Convoi sender intelligent-get-belief "K-Infos-Convois"
    ]
    if member? sender drones
    [
      intelligent-update-belief "K-Infos-Drones" remove K-get-Info-Drone sender intelligent-get-belief "K-Infos-Drones"
    ]
    if sender = intelligent-get-belief "target"
    [
      intelligent-update-belief "target" nobody
    ]
    
    set msg get-msg-if-performative "Death notification"
  ]
end

;; Affiche un message seulement si le mode debug est actif
to show-debug [ msg ]
  if show_debug = true [ show msg ]
end

;; check-attacked
;; ---
;; Le drone vérifie s'il est attaqué
to check-attacked
  ifelse not isAttacked
  [ if last-health != health [ set isAttacked true  ] ]
  [ if last-health  = health [ set isAttacked false ] ]
end

;; 
;; ---
;; Renvoie tous les ennemis que l'on a détecté dans les environs
;; Traitement par zone
;; On tiens en compte la "fraicheur" de la connaissance, elle ne doit pas être trop vieille
;; • patch-ref : Le patch à partir duquel on examine
to-report is-there-detected-enemies [ patch-ref ]
  let liste []
  let K-Infos-Enemies intelligent-get-belief "K-Infos-Enemies"
  
  foreach K-Infos-Enemies
  [
    if K-get "tick" ? < ticks - 20 and
       [distance zone-of-path-drones K-get "position" ? ] of zone-of-path-drones patch-ref <= taille-zone-drones * 2
    [
      set liste lput ? liste
    ]
  ]
  
  report liste
end