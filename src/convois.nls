;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Fonctions relatives aux CONVOIS ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Fonctions d'origine ;;
;;---------------------;;

; Procedure principale de gestion des convois
to convois-think

  if nb-cars > 0 [
    
    ;; Vérification des convois morts
    ask convois [ check-if-alive ]

    ;; Vérification des ennemis à proximité et sur le chemin
    if ticks mod 10 = 0
    [ check-enemies-around-convois ]

    if count convois = 0 [stop]
    let first-car min [who] of convois

    ; Calcul du plan AStar pour chaque leader si necessaire
    search-ways-convois first-car

    ; Deplacement des convois
    walk-convois first-car
    
    ask convois with [not finished? and not dead?] [
      ;; Vérifie si les convois sont attaqués
      check-attacked
      
      ;; Traitement des messages par le convoi
      msg-processing
      
      observe-enemies
    ]
  ]
end

;; search-ways-convois
;; ---
;; Calcul du plan AStar pour chaque leader si necessaire
;; • first-car : le convois dont l'id est le plus petit
to search-ways-convois [first-car]
  ; Deplacement des leaders sur le chemin AStar
  foreach sort-on [who] turtle-set convois with [leader? and not finished? and not dead?] [
    let id ([who] of ?) - first-car
    ; Recalcule le chemin si nécessaire (par exemple au début de la simulation ou quand le convoi se sépare)
    ; Note: on est oblige de le faire en dehors du ask sinon on ne peut pas acceder a tous les patchs
    if empty? as-path or length as-path < (id + 1) or empty? (item id as-path) [ ; s'il n'y a pas encore de chemin du tout, ou pas de chemin pour cette voiture, on cree un plan AStar
      ; Cree le plan AStar (attention a ca que le patch start soit au niveau ou il y a les obstacles, ici pzcor = mapAlt pour les obstacles)
      let start-patch min-one-of (patches with [pzcor = mapAlt and not obstacle?]) [distance ?] ; on s'assure de choisir comme patch de depart un patch libre sans obstacle, sinon quand on split un convoi il se peut qu'il soit sur un obstacle et qu'il ne puisse jamais generer de chemin
      ;let new-path plan-astar ([patch-at 0 0 (pzcor * -1)] of start-patch) (one-of patches with [objectif?]) ([genlongpath?] of ?)
      let new-path plan-astar ([patch-at 0 0 (pzcor * -1)] of start-patch) ([intelligent-get-belief "target"] of ?) ([genlongpath?] of ?)
      ; S'il n'y a pas de plan et qu'on a essayé de trouver un long chemin, on attend la prochaine iteration et on reessaie mais avec un plan court
      show "this is it"
      if empty? new-path and [genlongpath?] of ? [ ask ? [ set genlongpath? false ] ]
      ; S'il n'y a pas deja une entree pour cette voiture on la cree
      ifelse length as-path < (id + 1) [
        set as-path lput new-path as-path
      ]
      ; Sinon on remplace l'entree pour cette voiture par le nouveau plan
      [
        set as-path replace-item id as-path new-path
      ]
    ]
  ]
end

;; walk-convois
;; ---
;; Deplacement des convois
;; • first-car : le convois dont l'id est le plus petit
to walk-convois [first-car]
  ; Deplacement des leaders sur le chemin AStar
  ask convois with [leader? and not finished? and not dead?] [ ; Tant qu'on n'a pas atteint le but
                                                               ;move-convoi-naive ; deplacement naif sans AStar
    
                                                               ; Recupere le plan AStar
    let my-as-path item (who - first-car) as-path
    if not empty? my-as-path [
      ; Deplacement par waypoints: on se deplace jusqu'au prochain patch du chemin jusqu'à l'atteindre
      let next-patch first my-as-path
      let zz pzcor
      set next-patch [patch-at 0 0 (zz - pzcor)] of next-patch ; mise a niveau de pzcor au cas ou le chemin a ete calculé sur un autre plan
                                                               ; Deplacement vers le prochain waypoint
      if next-patch != patch-here [move-convoi next-patch false false]
      ; Si on a atteint ce patch, on le supprime de la liste, et on va donc continuer vers le prochain patch du chemin
      if patch-here = next-patch [
        set my-as-path remove-item 0 my-as-path
        set as-path replace-item (who - first-car) as-path my-as-path
        if debug [ show (word "Waypoint atteint: " patch-here ", prochain: " next-patch ) ]
      ]
    ]
    
    ; Critere d'arret: on est a cote de l'objectif
    check-convoi-finished
  ]
  
  ; Deplacement des voitures-cortege: elles ne font que suivre la voiture devant eux (avec laquelle elles sont liées)
  ask convois with [not leader? and not finished? and not dead?] [
    ifelse any? my-out-convoi-links [
      move-convoi ([patch-here] of one-of out-convoi-link-neighbors) true true
    ]
    ; S'il n'y a pas de lien devant, c'est probablement que la voiture est morte, donc on devient leader
    [
      set leader? true
      set genlongpath? true
      if not to-protect? [ set color orange ]
    ]
  ]
end

to-report detect-obstacle
 if any? other patches in-cone 10 60 with [obstacle?] [report true]
; if any? other patches in-cone 10 90 [report true]
; if any? other patches in-cone 3 270 [report true]
 report false
end

to turn-away
   ;let free-patches neighbors with [not any? patches ]
   ;if any? free-patches [face one-of free-patches]
   rt random 10 - 5
end

to check-convoi-finished
  ; Critere d'arret: on est a cote de l'objectif
  ; Note: on veut etre a cote de l'objectif et pas directement dessus car on est une voiture, donc il se peut qu'on tourne indefiniment autour sans arriver directement a arriver dessus a cause de la limite d'angle de rotation.
  if any? [neighbors6-nowrap with [objectif?]] of patch-here [ ; On ne bouge pas si on est arrive au but!
                                                               ; Fini pour le leader
    set finished? true
    ; Fini aussi pour toutes les voitures-cortege qui suivent ce leader
    let linked-cars (list in-convoi-link-neighbors)
    while [not empty? linked-cars] [ ; on fait une boucle pour recursivement mettre a finished? = true toutes les voitures liees entre elles dans ce cortege
      let next-linked-cars []
      foreach linked-cars [
        ask ? [
          set finished? true
          if any? in-convoi-link-neighbors [ ; on recupere les voitures-cortege liees a la voiture-cortege en cours
            set next-linked-cars lput in-convoi-link-neighbors next-linked-cars
          ]
        ]
      ]
      set linked-cars next-linked-cars
    ]
  ]
end

; Avancer une voiture
; Permet de faire avancer les voitures d'un convoi (cortege et leader)
; Maintien egalement une petite distance afin de ne pas "rentrer" dans la voiture de devant
to move-convoi [goal slowdown? cortege?]
  ;show (word "ici:" patch-here " goal:" goal)

  ; Calcule de l'angle avec la cible
  let headingFlag heading
  ifelse cortege?
  [ set headingFlag (towards goal) ] ; Si c'est un cortege, on veut qu'il suive toujours le leader par le chemin le plus court (surtout en play-mode ou le joueur n'est pas limite par le nowrap)
  [ set headingFlag (towards-nowrap goal) ]
  let dirCorrection subtract-headings headingFlag heading
  ; Arrondissement de l'angle (on ne veut pas faire de micro tournant)
  set dirCorrection precision dirCorrection 2
  ; Limite de l'angle, pour que ce soit plus realiste (la voiture ne peut pas faire un demi-tour sur place!)
  ifelse dirCorrection > maxdir [ ; limite a droite
    set dirCorrection maxdir
  ]
  [
    if dirCorrection < maxdir * -1 [ ; limite a gauche
      set dirCorrection maxdir * -1
    ]
  ]

  ; On tourne
  rt dirCorrection

  ; Limite de vitesse pour les voitures-cortege (pour pas qu'elles ne rentrent dans la voiture leader)
  let tmp-speed speed
  if slowdown? [
    if distance-nowrap goal < 1.1 [
      set tmp-speed tmp-speed / 20
    ]
    if distance-nowrap goal < 0.9 [
      set tmp-speed 0
    ]
  ]

  ; Deplacement!
  set pitch 0 ; make sure there's no pitch ever, else the car will disappear in the ground
  fd tmp-speed ; Avance
end

;; check-enemies-around-convois
;; ---
;; Fonction appelé seulment par les convois leader
;; Vérifie s'il y a des ennemis qui ont été repérés aux alentour du convoi
;; et de son chemin
;; S'il y en a un en face de lui, il commande un split au mileu du cortege (s'il est au moins de taille 4)
;; S'il y en a un sur un des cotés, il l'évite
;; S'il y en a des deux cotés, ça va mal
to check-enemies-around-convois
  ask convois with [leader?]
  [
    ;; Liste des ennemis autour du convoi
    let enemies-around-me is-there-detected-enemies patch-here
    
    ;; Liste des ennemis en face du convoi
    let face-to-me filter [abs (heading - towards-nowrap K-get "position" ?) <= 25
                      and [distance-nowrap myself] of K-get "turtle" ? < 20 ] enemies-around-me
    let count-face length face-to-me
    
    ;; Liste des ennemis à droite du convoi
    let right-to-me filter [heading - towards-nowrap K-get "position" ? < -25
                        and heading - towards-nowrap K-get "position" ? < -75
                        and [distance-nowrap myself] of K-get "turtle" ? < 20 ] enemies-around-me
    let count-right length right-to-me
    
    ;; Liste des ennemis à gauche du convoi
    let left-to-me filter [heading - towards-nowrap K-get "position" ? > 25
                       and heading - towards-nowrap K-get "position" ? > 75
                       and [distance-nowrap myself] of K-get "turtle" ? < 20 ] enemies-around-me
    let count-left length left-to-me
    
    
    let angle-to-objectif heading - towards-nowrap objectif
    
    let found false
    let me self
    let new-target []
    ;; S'il y a des ennemis en face
    if count-face != 0
    [
      let cortege-buddies intelligent-get-belief "cortege-buddies"
      if count-right = 0 and count-left = 0 and length cortege-buddies >= 4
      [
        let middle-cortege item (length cortege-buddies / 2) cortege-buddies
        ;; split
        ;; Envoi d'un message à tous les convois du cortege
        foreach cortege-buddies
        [
          send create-complete-msg ? "split-cortege" [who] of middle-cortege
        ]
        ;; Mise à jour de la propre connaissance sur le cortege
        split-update-belief-cortege [who] of middle-cortege
        
        set new-target patches with [ pzcor = solAlt
                                  and [distance-nowrap me] of self > taille-zone-drones / 2
                                  and [distance-nowrap me] of self < taille-zone-drones
                                  and 180 - [heading] of me - [towards-nowrap me] of self < -25
                                  and 180 - [heading] of me - [towards-nowrap me] of self < -25 - 90 ]
        if not empty? sort new-target
        [
          set found true
          set new-target one-of new-target with [ [distance-nowrap me] of self - min [[distance-nowrap me] of self] of new-target < 1 ]
          set heading heading - 90
          intelligent-update-belief "target" new-target
        ]
        
        set new-target patches with [ pzcor = solAlt
                                  and [distance-nowrap me] of self > taille-zone-drones / 2
                                  and [distance-nowrap me] of self < taille-zone-drones
                                  and 180 - [heading] of me - towards-nowrap me > 25
                                  and 180 - [heading] of me - towards-nowrap me > 25 + 90 ]
        if not empty? sort new-target
        [
          set found true
          set new-target one-of new-target with [ [distance-nowrap me] of self - min [[distance-nowrap me] of self] of new-target < 1 ]
          ask middle-cortege
          [
            intelligent-update-belief "target" new-target
            set heading heading + 90 
          ]
        ]
        
      ]
      
      ;; Si l'objectif est à droite, on préviligiera un contournement de ce coté
      ifelse angle-to-objectif <= 0
      [
        ;; S'il y a peu d'ennemis à droite 
        if not found and count-right < count-face / 2
        [
          set new-target patches with [pzcor = solAlt
                                  and [distance-nowrap me] of self > taille-zone-drones and 180 - [heading] of me - towards-nowrap me < -25 ]
          if not empty? sort new-target
          [
            set found true
            set new-target one-of new-target with [ [distance-nowrap me] of self - min [[distance-nowrap me] of self] of new-target < 1 ]
            intelligent-update-belief "target" new-target
          ]
        ]
        
        ;; Sinon, s'il y a peu d'ennemis à gauche
        if not found and count-left < count-face / 2
        [
          set new-target patches with [ [distance-nowrap me] of self > taille-zone-drones / 2
                                  and [distance-nowrap me] of self < taille-zone-drones and 180 - [heading] of me - towards-nowrap me > 25 ]
          if not empty? sort new-target
          [
            set found true
            set new-target one-of new-target with [ [distance-nowrap me] of self - min [[distance-nowrap me] of self] of new-target < 1 ]
            intelligent-update-belief "target" new-target
          ]
        ]
      ]
      
      ;; Sinon, on privilégie la gauche
      [
        ;; s'il y a peu d'ennemis à gauche
        if not found and count-left < count-face / 2
        [
          set new-target patches with [pzcor = solAlt
                                  and  [distance-nowrap me] of self > taille-zone-drones / 2
                                  and [distance-nowrap me] of self < taille-zone-drones and 180 - [heading] of me - towards-nowrap me > 25 ]
          if not empty? sort new-target
          [
            set found true
            set new-target one-of new-target with [ [distance-nowrap me] of self - min [[distance-nowrap me] of self] of new-target < 1 ]
            intelligent-update-belief "target" new-target
          ]
        ]
        
        ;; Sinon, s'il y a peu d'ennemis à droite 
        if not found and count-right < count-face / 2
        [
          set new-target patches with [pzcor = solAlt
                                  and  self != [patch-here] of me and [distance-nowrap me] of self > taille-zone-drones / 2
                                  and [distance-nowrap me] of self < taille-zone-drones and 180 - [heading] of me - towards-nowrap me < -25 ]
          if not empty? sort new-target
          [
            set found true
            set new-target one-of new-target with [ [distance-nowrap me] of self - min [[distance-nowrap me] of self] of new-target < 1 ]
            intelligent-update-belief "target" new-target
          ]
        ]
      ]
    ]
    
    if not found and count-right <  count-left
    [
      if not found and count-right < count-face / 2
      [
        set new-target patches with [pzcor = solAlt
                                  and  self != [patch-here] of self and [distance-nowrap me] of self > taille-zone-drones / 2
                                  and [distance-nowrap me] of self < taille-zone-drones and [heading] of me - towards-nowrap me < -25 ]
        if not empty? sort new-target
        [
          set found true
          set new-target one-of new-target with [ [distance-nowrap me] of self - min [[distance-nowrap me] of self] of new-target < 1 ]
          intelligent-update-belief "target" new-target
        ]
      ]
    ]
    
    if not found and count-left < count-right
    [
      set new-target patches with [pzcor = solAlt
                                  and  self != [patch-here] of me and [distance-nowrap me] of self > taille-zone-drones / 2
                                  and [distance-nowrap me] of self < taille-zone-drones and 180 - [heading] of me - towards-nowrap me > 25 ]
      if not empty? sort new-target
      [
        set found true
        set new-target one-of new-target with [ distance-nowrap me - min [distance-nowrap me] of new-target < 1 ]
        intelligent-update-belief "target" new-target
      ]
    ]
  ]
end

;; Division du convoi ;;
;;--------------------;;

;; Coupe le lien entre le convoi id et le convoi (id-1), et définit le leader du second cortege à convoi id
to split-convoi [ id ] ; id = cars / 2
  ;; Récupération du nouveau leader
  let new-leader convoi id
  
  ;; mise à jour des connaissances sur le cortege pour tous les membres du cortege
  ask convois
  [
    split-update-belief-cortege id
  ]
  
  ; affichage de astar pour le chemin suivi par le nouveau leader
  astar-affichage ([[patch-at 0 0 (pzcor * -1)] of patch-here] of new-leader) (one-of patches with [objectif?])
end

;; Divise les corteges en deux
to split
  foreach sort-on [who] convois with [leader?]
  [
    let cortege-buddies [intelligent-get-belief "cortege-buddies"] of ?
    ask ? [
      request-split-convoi-to-leader [who] of ? [who] of item floor (length cortege-buddies / 2) cortege-buddies
    ]
  ]
end

;; Vérifie que le convoi est en vie, sinon envoie un message au reste du cortège et relie celui d'après avec celui d'avant
to check-if-alive
  if health <= 0
  [
    ;; Récupération du convoi d'avant et d'après
    let previous-convoi nobody
    let next-convoi nobody
    if any? my-out-links [ ask one-of my-out-links [ set previous-convoi other-end ] ]
    if any? my-in-links [ ask one-of my-in-links [ set next-convoi other-end ] ]
    
    if previous-convoi != nobody and next-convoi != nobody
    [
      ;; Création du lien entre le convoi suivant et le convoi précédent
      ask next-convoi[ create-convoi-link-to previous-convoi ]
    ]
    
    ;; Suppression des liens
    if previous-convoi != nobody [ ask my-out-links [ die ] ]
    if next-convoi != nobody [ ask my-in-links [ die ] ]
    
    ;; Envoi d'un message signifiant sa mort aux autres membres du cortege
    i-am-dead intelligent-get-belief "cortege-buddies"
    set dead? true
    set hidden? true
    hide-turtle
    die
  ]
end


;; Beliefs ;;
;;---------;;


;; Initialise les connaissances du convoi
to setup-convois-beliefs
  ;; Connaissances sur les Drones 
  intelligent-update-belief "drone-protecteur" nobody
  
  intelligent-update-belief "target" objectif
  
  ;; Connaissances sur le cortege auquel on appartient  
  intelligent-update-belief "cortege-buddies" sort-on [who] convois
  set last-cortege intelligent-get-belief "cortege-buddies"
  intelligent-update-belief "leader" min-one-of convois [who] ;; Le leader du cortege auquel le convoi appartient, donc different de leader?
  
  intelligent-update-belief "K-receivers" []
  intelligent-update-belief "K-Infos-Drones" []
  intelligent-update-belief "K-Infos-Convois" []
  intelligent-update-belief "K-Infos-Enemies" []
end


;; Met à jour les connaissances sur le cortège, par suppression de la liste à partir de l'id passé en argument
to split-update-belief-cortege [split-id]
  let cortege intelligent-get-belief "cortege-buddies"
  ;; Si on est avant, dans le convoi, on supprime après l'id, sinon on supprime avant et on change le leader
  ifelse who < split-id
  [
    intelligent-update-belief "cortege-buddies" filter [[who] of ? < split-id] intelligent-get-belief "cortege-buddies"
  ]
  [
    intelligent-update-belief "cortege-buddies" filter [[who] of ? >= split-id] intelligent-get-belief "cortege-buddies"
    intelligent-update-belief "leader" convoi split-id
  ]
end


;; Reception et traitement des messages ;;
;;--------------------------------------;;

;; Traitement des messages reçus à chaque tick
to msg-processing
  ;; Messages concernant les splits
  ifelse leader?
  [ receive-split-request-leader ]
  [ receive-split-cortege-convoi ]
  
  ;; Messages concernant les morts
  receive-death-messages
  
  ;; Messages concernant le recrutement des drones protecteurs
  recrutement-drones
  
  ;; Partage et mise à jour des connaissances
  traite-connaissances
      
  ;; Mise en place de la mémoire temporelle
  set last-isAttacked isAttacked
  set last-cortege intelligent-get-belief "cortege-buddies"
end