;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Drones' communication related code ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Drones potégeant un convoi ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Le drone demande au convoi s'il y a encore de la place
;; pour le protéger
to enrollement
  let etat intelligent-get-belief "etat enrollement"
  let counter intelligent-get-belief "counter enrollement"
;  let convoi-suivi intelligent-get-belief "target"

  ;; Le drone recherche un convoi
  if etat = "cherche convoi" [
    enrollement-cherche-convoi
    stop
  ]
  
  ;; TimeOut
  ;; ---
  ;; Si la communication n'aboutit pas au bout d'un certain
  ;; temps, le drone se remettra à la recherche d'un autre convoi   ------ Garder en mémoire les convoi qui ne répondent pas ?
  if counter > max-counter [
    intelligent-update-belief "etat enrollement" "cherche convoi"
    intelligent-update-belief "counter enrollement" 0
    stop
  ]
  
  ;; Le drone demande au convoi s'il peut le protéger
  if etat = "demande au convoi" [
    enrollement-demande-au-convoi
    stop
  ]
  ;; Attente de la réponse du leader du convoi
  if etat = "demande envoyée" [
    enrollement-demande-envoyee
    stop
  ]
  ;; Suivi du convoi
  if etat = "suivi" [
    enrollement-suivi
    stop
  ]
end

to-report can-communicate-with-convoi [target]
  report [distance-nowrap myself] of target < communication-radius-drones and not [dead?] of target
end

to enrollement-cherche-convoi
  let convoi-suivi intelligent-get-belief "target"
  
  if convoi-suivi != nobody [
    intelligent-update-belief "etat enrollement" "demande au convoi"
    intelligent-update-belief "counter enrollement" 0
    stop
  ]
  
  add-One-to-counter
end

to enrollement-demande-au-convoi
  let convoi-suivi intelligent-get-belief "target"
  
  if can-communicate-with-convoi convoi-suivi [
    ;; Envoi du message
    send create-complete-msg convoi-suivi "drone-protect" "enregistrement"
    
    intelligent-update-belief "etat enrollement" "demande envoyee"
    intelligent-update-belief "counter enrollement" 0
    stop
  ]
  
  add-One-to-counter
end

to enrollement-demande-envoyee
  let msg get-message
  if check-message msg "drone-protect" "Accept"
    [
      intelligent-update-belief "etat enrollement" "suivi"
      set leader? true
      intelligent-update-belief "drone-protect leader" self
      intelligent-update-belief "drone-protect team" (list self)
      intelligent-update-belief "counter enrollement" 0
      intelligent-update-belief "tail-cortege" convoi read-from-string first get-field "tail" msg
      
      ;set color [color] of intelligent-get-belief "target"
      stop
    ]
  if check-message msg "drone-protect" "Refuse"
    [
      intelligent-update-belief "etat enrollement" "cherche convoi"
      intelligent-lput-belief "convoi-already-protected" intelligent-get-belief "target"
      intelligent-update-belief "target" nobody
      intelligent-update-belief "counter enrollement" 0
      show "Refusé"
      stop
    ]
    
  if check-message msg "drone-protect" nobody
  [
    let leader get-content msg
    intelligent-update-belief "etat enrollement" "demande leader"
    intelligent-update-belief "drone-protect leader" leader
    intelligent-update-belief "counter enrollement" 0
    show (word "demande au leader " leader)
    stop
  ]
  
    
  add-One-to-counter
end

to enrollement-demande-au-leader
  let leader intelligent-get-belief "drone-protect leader"
  
  if can-communicate-with-convoi leader [
    send create-complete-msg leader "drone-protect" "enregistrement"
    
    intelligent-update-belief "etat enrollement" "demande envoyee au leader drone"
    intelligent-update-belief "counter enrollement" 0
    stop
  ]
  
  add-One-to-counter
end

to enrollement-demande-envoyee-au-leader
  let msg get-message
  if check-message msg "drone-protect" "Accept"
  [
    intelligent-update-belief "etat enrollement" "suivi"
    intelligent-update-belief "counter enrollement" 0
    
    ;set color [color] of intelligent-get-belief "drone-protect leader"
    stop
  ]
  if check-message msg "drone-protect" "Refuse"
  [
    intelligent-update-belief "drone-protect leader" nobody
    intelligent-update-belief "etat enrollement" "cherche convoi"
    intelligent-lput-belief "convoi-already-protected" intelligent-get-belief "target"
    intelligent-update-belief "target" nobody
    intelligent-update-belief "counter enrollement" 0
    show "Refusé"
    stop
  ]
end

;; Chaque drone protecteur répond présent à l'appel
;; L'appel peut provenir du convoi leader (dans le cas du leader de la flotte)
;; ou du leader de la flotte pour les autres drones
;; -----------------
to enrollement-suivi
    if leader? [
;    if check-message msg "drone-protect" "R-U-here?"
;    [ send create-complete-reply msg "drone-protect" "I'm-here" ]
    enrollement-equipe
    stop
  ]
    
  let leader intelligent-get-belief "drone-protect leader"
end

;; Le drone leader d'une équipe de protecteur se charge des postulations des
;; autres drones qui composeront la flotte
;; ------------------
to enrollement-equipe
  let msg get-msg-if-performative "drone-protect"
  if check-message msg "drone-protect" "enregistrement"
  [
    let sender get-sender msg
    let team intelligent-get-belief "drone-protect team"
    
    ifelse not member? [self] of turtle read-from-string sender team and length team < size-team-protector
    [
      send create-complete-msg sender "drone-protect" "Accept"
      intelligent-update-belief "drone-protect team" lput (drone read-from-string sender) team
      if length team = size-team-protector
      [
        ask drone read-from-string sender [ set attacker true ]
      ]
    ]
    [
      send create-complete-msg sender "drone-protect" "Refuse"
    ]
  ]
end

to add-One-to-counter
  intelligent-update-belief "counter enrollement" (intelligent-get-belief "counter enrollement" + 1)
end