;;;;;;;;;;;;;;;;;;;;;;;;;
;; Drones related code ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

breed [drones drone]

drones-own [
  ;; Statut du drone
  ;; ---
  ;; • statu                     : Le poste que doit tenir le drone parmis
  ;;    • protect-convoi         : Le drone protege un convoie
  ;;
  ;; • intentions                : Liste des intentions du drone, pour la BDI
  ;; • flag-end-of-intention     : Booléen, état de l'intention en cours (actif ou non)
  statu
  intentions
  flag-end-of-intention
  
  ;; • dead?                     : Vitalité du drone
  ;; • vision-radius             : Taille du champs de vision
  dead?
  vision-radius

  ;; Beliefs
  ;; ---
  ;;   Suivi
  ;;   ---
  ;;   • convoi-suivi            : Convoi que le drone suit et protège
  ;;   Rapatriement
  ;;   ---
  ;;   • base-patch              : Position de la base
  ;;   • last-statu              : Statu avant le rapatriement
  beliefs
  ; à supprimer
  convoi-suivi
  base-patch
  last-statu

  ;; Déplacement
  ;; ---
  ;; • speed            : Vitesse du drone
  ;; • max-dir          : Rotation maximale par tick
  ;; • max-alt          : Altitude de vol maximale
  ;; • min-alt          : Altitude de vol minimale
  speed
  max-dir
  max-alt
  min-alt
  
  ;; Carburant
  ;; ---
  ;; • fuel             : Carburant restant
  ;; • max-fuel         : Taille du réservoire
  ;; • pourcentage-sec. : Pourcentage de fuel suplémentaire estimé comme nécessaire pour un Rapatriement
  fuel
  max-fuel
  pourcentage-securite-fuel-drones
]

;;;;;;;;;;;
;; SETUP ;;
;;;;;;;;;;;

to setup-drones
  create-drones nb-drones
  load-shapes-3d "ressources/drone.nlshape"
  ask drones [
    ; Init apparence NetLogo
    set shape "turtle"
    set size size * 0.03
    ;set color grey - 2
    
    ;; Variables
    ;; ---
    ;; Statut du drone
    set statu "protect-convoi"
    set intentions ([])
    set flag-end-of-intention "false"
    
    set dead? false
    set vision-radius drones-vision-radius
    
    ;; Beliefs
    ;; ---
    ;;   Suivi
    ;;   ---
    ;;   • convoi-suivi   : Convoi que le drone suit et protège
    ;;   Rapatriement
    ;;   ---
    ;;   • base-patch       : Position de la base
    ;;   • last-statu       : Statu avant le rapatriement
    set beliefs ([])
    update-belief-enemy create-belief "convoi-suivi" nobody
    
    update-belief-enemy create-belief "base-patch" nobody
    update-belief-enemy create-belief "last-statu" "enBase"
    
    ;; Deplacement
    set speed 0.05 * simu-speed
    set max-dir 10 * simu-speed
    set max-alt max-alt-drones + solAlt
    set min-alt min-alt-drones + solAlt
    
    ;; Carburant                             --- Plusieurs modèles de drones avec des caractéristiques pré-définis ?
    set fuel max-fuel-drones
    set max-fuel max-fuel-drones
    set pourcentage-securite-fuel-drones 0.1
    
    ;; Placement
    move-to one-of patches with [ base? ]
    set zcor solAlt
    
    ;; Stratégie
    add-intention "take-off-drones" is-end-of-intention
  ]
end

;;;;;;;;;;
;; MOVE ;;
;;;;;;;;;;

to move-drone
  take-off-drones-noBDI
  suivi-drones-noBDI
  rapatriement-drones
  landing-drones-noBDI
end

; Fait aterrire les drones
to landing-drones-noBDI
  ask drones with [ statu = "Rapatriement" and distance-nowrap get-belief-drones "base-patch" < max-Alt + 1 and zcor > solAlt ] [
    let newAlt zcor - speed
    ifelse newAlt > solAlt [
      let last-pitch pitch
      set pitch -90
      fd-drones speed
      set pitch last-pitch
    ]
    [ move-to patch xcor ycor solAlt ]
    if newAlt <= solAlt [ set statu "Base" ]
  ]
end

; Fait décoller les drones
to take-off-drones-noBDI
  ask drones with [ statu != "Rapatriement" and zcor < min-Alt ] [
    let newAlt zcor + speed
    ifelse newAlt < max-alt [
      let last-pitch pitch
      set pitch 90
      fd-drones speed
      set pitch last-pitch
    ]
    [ set statu "Suivi" ]
  ]
end

to suivi-drones-noBDI
  ask drones with [ statu = "Suivi" ] [
    if get-belief-drones "convoi-suivi" = nobody [
      search-convoi-drones
    ]
    if get-belief-drones "convoi-suivi" != nobody [
      if not distance-min-drones [
        ; Rotation
        rotate-drone get-belief-drones "convoi-suivi"
      ]
      ; Déplacement
      if distance-nowrap get-belief-drones "convoi-suivi" > drones-suivi-radius [ fd-drones speed ]
    ]
  ]
end

to suivi-convoi-drones
  if get-belief-drones "convoi-suivi" = nobody [
    search-convoi-drones
  ]
  if get-belief-drones "convoi-suivi" != nobody [
    if not distance-min-drones [
      ; Rotation
      rotate-drone get-belief-drones "convoi-suivi"
    ]
    ; Déplacement
    if distance-nowrap get-belief-drones "convoi-suivi" > drones-suivi-radius [ fd-drones speed ]
  ]
end

to search-convoi-drones
  let targets convois in-radius-nowrap vision-radius
  ifelse count targets = 0 [
    update-belief-drones create-belief "convoi-suivi" nobody
  ]
  [
    update-belief-drones create-belief "convoi-suivi" first sort-on [distance-nowrap myself] targets
  ]
end

;; Rapatriement
;; ---
;; Doit-on garder en mémoire la direction de la base,
;; ou doit-on considérer que les drones connaissent
;; l'emplacement exacte de la base en tout temps ?
to rapatriement-drones
  ask drones with [ statu = "Rapatriement" ] [
    if not at-base-drones [
      rotate-drone get-belief-drones "base-patch"
      ;ifelse [distance-nowrap myself] of (get-belief-drones "base-patch") < speed / 2 [ fd-drones speed / 5 ]
      fd-drones min (list speed ([distance-nowrap myself] of (get-belief-drones "base-patch") / 20))
    ]
  ]
end

to check-fuel-drones-noBDI
  ask drones with [ statu != "OutOfFuel" and fuel <= 0 and not at-base-drones ] [
    set statu "OutOfFuel"
    set color yellow
  ]
  
  ask drones with [ statu = "OutOfFuel" and zcor > solAlt + 1 ] [
    set zcor solAlt
  ]
  
  ask drones with [ statu != "Rapatriement" and statu != "OutOfFuel" and not dead? ] [
    ;; Le patch de la base la plus proche
    let tmp first sort-on [distance-nowrap myself] patches with [ base? ]
    
    ;; Vérification du carburant restant                                           --- distance-nowrap euclidienne ou de Manhattan ?
    if (fuel + pourcentage-securite-fuel-drones * fuel) < (abs ([pxcor] of tmp - xcor ) + abs ([pycor] of tmp - ycor )) [
    ;if (fuel + pourcentage-securite-fuel-drones * fuel) < [distance-nowrap myself] of tmp * speed [
      update-belief-drones create-belief "last-statu" statu
      set statu "Rapatriement"
      update-belief-drones create-belief "base-patch" tmp
;      set base-patch tmp
    ]
  ]
end

to check-fuel-drones
  ;; Le patch de la base la plus proche
  let tmp first sort-on [distance-nowrap myself] patches with [ base? ]
  
  ;; Vérification du carburant restant
  if (fuel + pourcentage-securite-fuel-drones * fuel) < (abs ([pxcor] of tmp - xcor ) + abs ([pycor] of tmp - ycor )) [
    ;; Le drone garde en mémoire la place de la base la plus proche
    update-belief-drones create-belief "base-patch" tmp
    
    ;; Fin du comportement principal, le drone doit se ravitailler
    let this-intention get-intention
    add-intention "ravitaillement-drones" is-end-of-intention
    remove-intention this-intention
    set flag-end-of-intention "true" ]
end

; Chargement du carburant
to reload-drones-noBDI
  ask drones with [ statu = "Base" ] [
    set fuel max-fuel
    set statu get-belief-drones "last-statu"
  ]
end

to drones-think
  
  ;; Pour les drones à la base
  ;reload-drones
  
  ;; Vérification du carburant
  ;check-fuel-drones
  
  ask drones with [ not dead? and fuel > 0 ] [
    execute-intentions
    set fuel fuel - speed
    show intentions
  ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Comportement (Behaviours / Intentions) ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Décollage du drone
to take-off-drones
  set flag-end-of-intention "false"
  
  ;; Calcul de la nouvelle altitude visée
  let newAlt zcor + speed
  
  ifelse newAlt < max-alt [
    ;; Le drone monte
    let last-pitch pitch
    set pitch 90
    fd-drones speed
    set pitch last-pitch
    
    ;; Perte de carburant
  ];set fuel fuel - speed * puissance-moteur-drones ]
  
  ;; Fin du décollage, le drone reprend son comportement principal
  [ let this-intention get-intention
    add-intention statu "false"
    remove-intention this-intention
    set flag-end-of-intention "true" ]
end

;; Aterrissage du drone
to landing
  set flag-end-of-intention "false"
  
  ;; Calcul de la nouvelle altitude visée
  let newAlt zcor - speed
  
  ifelse newAlt > solAlt [
    ;; Le drone descend
    let last-pitch pitch
    set pitch -90
    fd-drones speed
    set pitch last-pitch
  ]

  ;; Fin de l'aterrissage
  [ move-to patch xcor ycor solAlt 
    let this-intention get-intention
    add-intention "reload-drones" "false"
    remove-intention this-intention
    set flag-end-of-intention "true" ]
end

;; Rechargement du fuel
to reload-drones
  set flag-end-of-intention "false"
  if fuel < max-fuel
  [ set fuel min (list max-fuel (fuel + loading-speed-fuel)) ]
  if fuel = max-fuel 
  [ let this-intention get-intention
    add-intention "take-off-drones" "false"
    remove-intention this-intention
    set flag-end-of-intention "true" ]
end

;; Suivi et protection de convoi
to protect-convoi
  set flag-end-of-intention "false"
  
  suivi-convoi-drones
  
  check-fuel-drones
end

;; Retour à la base pour le ravitaillement en carburant
to ravitaillement-drones
  set flag-end-of-intention "false"
  ifelse not at-base-drones [
    rotate-drone get-belief-drones "base-patch"
    fd-drones min (list speed ([distance-nowrap myself] of (get-belief-drones "base-patch") / 20))
  ]
  [ let this-intention get-intention
    add-intention "landing" "false"
    remove-intention this-intention
    set flag-end-of-intention "true" ]
end

;;;;;;;;;;;;;;;;;;;;;;;;
;; Fonctions diverses ;;
;;;;;;;;;;;;;;;;;;;;;;;;

to rotate-drone [ goal ]
  ; Si le drone se trouve à l'endroit souhaité (modulo l'altitude)
  if is-turtle? goal and [xcor] of goal = xcor and [ycor] of goal = ycor or 
     is-patch? goal and [pxcor] of goal = xcor and [pycor] of goal = ycor [
       stop
  ]
  
  ; Calcul de l'angle avec la cible
  let headingFlag (towards-nowrap goal)
  let dirCorrection subtract-headings headingFlag heading
  
  ; Arrondissement de l'angle (on ne veut pas faire de micro tournant)
  set dirCorrection precision dirCorrection 2
  
  ; Limite de l'angle, pour que ce soit plus realiste
  ifelse dirCorrection > max-dir [ ; limite a droite
    set dirCorrection max-dir
  ]
  [
    if dirCorrection < max-dir * -1 [ ; limite a gauche
      set dirCorrection max-dir * -1
    ]
  ]
  
  ; On tourne
  rt dirCorrection
end

to-report at-base-drones
  report abs ([pxcor] of get-belief-drones "base-patch" - xcor ) + abs ([pycor] of get-belief-drones "base-patch" - ycor ) < 1
  ;report min [distance-nowrap myself] of patches with [ base? ] <= 1
end

to fd-drones [ sp ]
  ifelse [distance-nowrap myself] of patch-ahead sp < sp + 5 [
    fd sp
  ]
  [ ifelse [distance-nowrap myself] of patch-ahead sp / 5 < sp / 5 + 5 [
      fd sp / 5
    ]
    [
      ifelse heading >= 180 [ rt 10 ] ;; PAS BON
      [ lt 10 ]
    ]
  ]
end

to-report distance-min-drones
  if count drones < 2 [ report true ]
  ; Calcul de l'angle avec la cible
  let other-drone first sort-on [distance-nowrap myself] other drones
  if [distance myself] of other-drone > min-distance-drones [ report false ]
  
  ; Si le drone se trouve au même endroit que l'autre drone (modulo l'altitude)
  if [xcor] of other-drone = xcor and [ycor] of other-drone = ycor [
       report false
  ]
  let headingFlag (towards-nowrap other-drone)
  let dirCorrection subtract-headings headingFlag heading
  
  
  if dirCorrection < 120 and dirCorrection > 0[
    lt 10
    fd-drones speed
  ]
  if dirCorrection > -120 and dirCorrection < 0[
    rt 10
    fd-drones speed
  ]
  report true
end

to-report is-end-of-intention
  report flag-end-of-intention
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Fonctions pour les Beliefs ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to update-belief-drones [bel]
  ifelse exist-beliefs-of-type belief-type bel
    [
      update-belief bel
    ]
    [
      add-belief bel
    ]
end

to-report get-belief-drones [b-type]
  report belief-content read-first-belief-of-type b-type
end