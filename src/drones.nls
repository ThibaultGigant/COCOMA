;;;;;;;;;;;;;;;;;;;;;;;;;
;; Drones related code ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

breed [drones drone]

drones-own [
  ;; Statut du drone
  ;; ---
  ;; • statu                     : Le poste que doit tenir le drone parmis
  ;;    • protect-convoi         : Le drone protege un convoie
  ;;    • attaquant              : Le drone attaque les ennemis
  ;;    • ravitailleur           : Le drone ravitaille les autres drones
  ;;    • surveillant            : Le drone surveille le terrain
  ;;
  ;; • intentions                : Liste des intentions du drone, pour la BDI
  ;; • incoming-queue            : Liste des messages reçus
  statu
  intentions
  incoming-queue
  
  ;; • dead?                     : Vitalité du drone
  ;; • vision-radius             : Taille du champs de vision
  dead?
  vision-radius

  ;; Beliefs
  ;; ---
  ;;   Suivi
  ;;   ---
  ;;   • convoi-suivi            : Convoi que le drone suit et protège
  ;;   Rapatriement
  ;;   ---
  ;;   • base-patch              : Position de la base
  ;;   • last-statu              : Statu avant le rapatriement
  beliefs

  ;; Déplacement
  ;; ---
  ;; • speed            : Vitesse du drone
  ;; • max-dir          : Rotation maximale par tick
  ;; • max-alt          : Altitude de vol maximale
  ;; • min-alt          : Altitude de vol minimale
  speed
  max-dir
  max-alt
  min-alt
  
  ;; Carburant
  ;; ---
  ;; • fuel             : Carburant restant
  ;; • max-fuel         : Taille du réservoire
  ;; • pourcentage-sec. : Pourcentage de fuel suplémentaire estimé comme nécessaire pour un Rapatriement
  fuel
  max-fuel
  pourcentage-securite-fuel-drones
]

;;;;;;;;;;;
;; SETUP ;;
;;;;;;;;;;;

to setup-drones
  create-drones nb-drones
  load-shapes-3d "ressources/drone.nlshape"
  ask drones [
    ; Init apparence NetLogo
    set shape "turtle"
    set size size * 0.03
    ;set color grey - 2
    
    ;; Variables
    ;; ---
    ;; Statut du drone
    set statu "protect-convoi"
    set intentions ([])
    set incoming-queue []
    
    set dead? false
    set vision-radius drones-vision-radius
    
    ;; Beliefs
    ;; ---
    ;;   Suivi
    ;;   ---
    ;;    • convoi-suivi     : Convoi que le drone suit et protège
    ;;    • etat enrollement : Etape dans la procédure de recrutement
    ;;    • counter enroll.  : Compteur servant au TimeOut pour la procédure de recrutement
    ;;   Rapatriement
    ;;   ---
    ;;    • base-patch       : Position de la base
    ;;    • last-statu       : Statu avant le rapatriement
    set beliefs ([])
    intelligent-update-belief "convoi-suivi" nobody
    intelligent-update-belief "etat enrollement" "cherche convoi"
    intelligent-update-belief "counter enrollement" 0
    
    intelligent-update-belief "base-patch" nobody
    intelligent-update-belief "last-statu" "enBase"
    
    ;; Deplacement
    set speed speed-drones * simu-speed / 1000
    set max-dir 10 * simu-speed
    set max-alt max-alt-drones + solAlt
    set min-alt min-alt-drones + solAlt
    
    ;; Carburant                             --- Plusieurs modèles de drones avec des caractéristiques pré-définis ?
    set fuel max-fuel-drones
    set max-fuel max-fuel-drones
    set pourcentage-securite-fuel-drones 0.2
    
    ;; Placement
    move-to one-of patches with [ base? ]
    set zcor solAlt
    
    ;; Stratégie
    add-intention "take-off-drones" "false"
  ]
end

to drones-think  
  ask drones with [ not dead? and fuel >= 0 ] [
    execute-intentions
  ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;       Intentions       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; I. protect-convoi
;; ---
;; Suivi et protection de convoi

to protect-convoi
  
  enrollement
  
  suivi-convoi-drones
  
  check-fuel-drones
end

to suivi-convoi-drones
  if intelligent-get-belief "convoi-suivi" = nobody [
    search-convoi-drones
  ]
  if intelligent-get-belief "convoi-suivi" != nobody [
    if not distance-min-drones [
      ; Rotation
      rotate-drone intelligent-get-belief "convoi-suivi"
    ]
    ; Déplacement
    if distance-nowrap intelligent-get-belief "convoi-suivi" > drones-suivi-radius [ fd-drones speed ]
  ]
  
  ;; Coût du flottement
  if zcor > solAlt + 0.5 [ fuel-consomme "floating" 1 ]
end

to search-convoi-drones
  let targets convois with [leader?] in-radius-nowrap vision-radius
  ifelse count targets = 0 [
    intelligent-update-belief "convoi-suivi" nobody
  ]
  [
    intelligent-update-belief "convoi-suivi" first sort-on [distance-nowrap myself] targets
  ]
end

;; II. attaquant
;; ---
;; Attaque des ennemis

;; III. ravitailleur
;; ---
;; Ravitaille les drones en carburant

;; IV. surveillmant
;; ---
;; Surveille le terrain


;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;       Mouvements       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Décollage du drone
to take-off-drones
  
  ;; Calcul de la nouvelle altitude visée
  let newAlt zcor + speed
  
  ifelse newAlt < max-alt [
    ;; Le drone monte
    let last-pitch pitch
    set pitch 90
    fd-drones speed
    set pitch last-pitch
    
    ;; Perte de carburant
  ]
  
  ;; Fin du décollage, le drone reprend son comportement principal
  [ let this-intention get-intention
    add-intention statu "false"
    remove-intention this-intention ]
end

;; Aterrissage du drone
to landing  
  ;; Calcul de la nouvelle altitude visée
  let newAlt zcor - speed
  
  ifelse newAlt > solAlt [
    ;; Le drone descend
    let last-pitch pitch
    set pitch -90
    fd-drones speed
    set pitch last-pitch
  ]

  ;; Fin de l'aterrissage
  [ move-to patch xcor ycor solAlt 
    let this-intention get-intention
    add-intention "reload-drones" "false"
    remove-intention this-intention ]
end

;; Rechargement du fuel
to reload-drones
  if fuel < max-fuel
  [ set fuel min (list max-fuel (fuel + loading-speed-fuel)) ]
  if fuel = max-fuel 
  [ let this-intention get-intention
    add-intention "take-off-drones" "false"
    remove-intention this-intention ]
end

;; Ravitaillement
;; Retour à la base pour le ravitaillement en carburant
;; ---
;; Doit-on garder en mémoire la direction de la base,
;; ou doit-on considérer que les drones connaissent
;; l'emplacement exacte de la base en tout temps ?
to ravitaillement-drones
  ifelse not at-base-drones [
    rotate-drone intelligent-get-belief "base-patch"
    fd-drones min (list speed ([distance-nowrap myself] of (intelligent-get-belief "base-patch") / 20))
    
    ;; Coût du flottement
    if zcor > solAlt + 0.5 [ fuel-consomme "floating" 1 ]
  ]
  [ let this-intention get-intention
    add-intention "landing" "false"
    remove-intention this-intention ]
end

;; Fait avancer les drones, prend en compte le nowrap et les limites de map
to fd-drones [ sp ]
  ifelse [distance-nowrap myself] of patch-ahead sp < sp + 5 [
    fd sp
    
    fuel-consomme "fd" sp
  ]
  [ ifelse [distance-nowrap myself] of patch-ahead sp / 5 < sp / 5 + 5 [
      fd sp / 5
      
      fuel-consomme "fd" (sp / 5)
    ]
    [
      ifelse heading >= 180 [ rt 10 ]
      [ lt 10 ]
      
      ;; Carburant consommé (un rotation vaut trois fois moins qu'un déplacement)
      
      fuel-consomme "rotation" 10
    ]
  ]
end

;; Tourne la tête du drone
to rotate-drone [ goal ]
  ; Si le drone se trouve à l'endroit souhaité (modulo l'altitude)
  if is-turtle? goal and [xcor] of goal = xcor and [ycor] of goal = ycor or 
     is-patch? goal and [pxcor] of goal = xcor and [pycor] of goal = ycor [
       stop
  ]
  
  ; Calcul de l'angle avec la cible
  let headingFlag (towards-nowrap goal)
  let dirCorrection subtract-headings headingFlag heading
  
  ; Arrondissement de l'angle (on ne veut pas faire de micro tournant)
  set dirCorrection precision dirCorrection 2
  
  ; Limite de l'angle, pour que ce soit plus realiste
  ifelse dirCorrection > max-dir [ ; limite a droite
    set dirCorrection max-dir
  ]
  [
    if dirCorrection < max-dir * -1 [ ; limite a gauche
      set dirCorrection max-dir * -1
    ]
  ]
  
  ; On tourne
  rt dirCorrection
end

;;;;;;;;;;;;;;;;;;;;;;;;
;; Fonctions diverses ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;; I. Fonctions liées au carburant
;; ---
;; • check-fuel-drones          : Vérifie s'il y a encore assez de fuel pour revenir à la base
;; • fuel-consomme              : Met-à-jour le niveau de carburant du drones en fonction de ses actions

;; Vérification du carburant
to check-fuel-drones
  ;; Le patch de la base la plus proche
  let tmp first sort-on [distance-nowrap myself] patches with [ base? ]
  
  ;; Estimation du carburant nécesasire pour rentrer à la base
  ;; • pourcentage-securite-fuel-drones       : Donne une marge de sécurité
  ;; ---
  ;; Calcul
  ;; • Le drone se déplace jusqu'à la base (fuel-consomme "fd")   : distance-nowrap myself
  ;; • Le drone flotte dans les airs (fuel-consomme "floating")   : 0.25 / speed (le flottement coût un quart moins cher)
  ;; • Le drone se laisse une marge                               : pourcentage-securite-fuel-drones
  ;; • La puissance moteur du drone est prise en compte           : puissance-moteur-drones
  let fuel-estimate ([distance-nowrap myself] of tmp * ( 1 + 0.25 / speed) + (zcor - solAlt) / 5)
                    * (1 + pourcentage-securite-fuel-drones) * puissance-moteur-drones

  ;; Vérification du carburant restant
  if fuel < fuel-estimate [
    ;; Le drone garde en mémoire la place de la base la plus proche
    intelligent-update-belief "base-patch" tmp
    
    ;; Fin du comportement principal, le drone doit se ravitailler
    let this-intention get-intention
    add-intention "ravitaillement-drones" "false"
    remove-intention this-intention ]
end

;; Comsomation de carburant
;; ---
;; La consommation dépend de la puissance des moteurs du drone,
;; ainsi que du type de l'action / du mouvement
;; ---
;; • mouv                 : Type de l'action effectué
;;   ---- Types
;;        • "fd"          : Le drone a avancé devant lui (coût étalon, par mètre)
;;        • "rotation"    : Le drone a effectué une rotation (coûte trois fois moins cher, pour 10 degrés)
;;        • "take-off"    : Le drone décolle (ou prend de l'altitude) (coûte 1.5 fois plus cher, par mètre)
;;        • "landing"     : Le drone aterri (ou perd de l'altitude) (coûte 5 fois moins cher, par mètre)
;;        • "floating"    : Le drone reste sur place (on ne cumule avec un autre type) (coûte 4 fois moins cher, par tick)
;;   ----
;; • nb                   : Valeur associé à l'action (de combien de mètres le drone a avancé, etc)
to fuel-consomme [ mouv nb ]
  if mouv = "fd"
  [ set fuel fuel - nb  * puissance-moteur-drones ]
  
  if mouv = "rotation"
  [ set fuel fuel - (nb / 30) * puissance-moteur-drones ]
  
  if mouv = "take-off"
  [ set fuel fuel - (nb * 1.5)  * puissance-moteur-drones ]
  
  if mouv = "landing"
  [ set fuel fuel - (nb / 5)  * puissance-moteur-drones ]
  
  if mouv = "floating"
  [ set fuel fuel - (1 / 4)  * puissance-moteur-drones ]
  
end

;; II. Fonctions utilitaires
;; ---
;; at-base-drones            : Renvoie si le drone est à la base
;; distance-min-drones       : Vérifie si le drone est trop proche d'un autre

to-report at-base-drones
  report abs ([pxcor] of intelligent-get-belief "base-patch" - xcor ) + abs ([pycor] of intelligent-get-belief "base-patch" - ycor ) < 1
  ;report min [distance-nowrap myself] of patches with [ base? ] <= 1
end

to-report distance-min-drones
  if count drones < 2 [ report false ]
  ; Calcul de l'angle avec la cible
  let other-drone first sort-on [distance-nowrap myself] other drones
  if [distance myself] of other-drone > min-distance-drones [ report false ]
  
  ; Si le drone se trouve au même endroit que l'autre drone (modulo l'altitude)
  if [xcor] of other-drone = xcor and [ycor] of other-drone = ycor [
       report false
  ]
  let headingFlag (towards-nowrap other-drone)
  let dirCorrection subtract-headings headingFlag heading
  
  
  if dirCorrection < 120 and dirCorrection > 0[
    lt 10
    fuel-consomme "rotation" 10
    
    fd-drones speed
  ]
  if dirCorrection > -120 and dirCorrection < 0[
    rt 10
    fuel-consomme "rotation" 10
    
    fd-drones speed
  ]
  report true
end