;;;;;;;;;;;;;;;;;;;;;;;;
;; Attaque des drones ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;; attaque-drones
;; ---
;; Programme l'attaque des drones
to attaque-drones
  let target intelligent-get-belief "target"
  
  ;; Si l'on suivait un patch, et qu'on y est arrivé, on oublie
  if target != nobody and member? target patches
  and abs (xcor - [pxcor] of target ) + abs (ycor - [pycor] of target) < 1
  [
    intelligent-update-belief "target" intelligent-get-belief "convoi-suivi"
  ]
  
  ;; Vérifie la santé de l'ennemi
  if target != nobody and member? target enemies
  [
    if [dead?] of target or distance target > drones-vision-radius
    [
      intelligent-update-belief "target" intelligent-get-belief "convoi-suivi"
    ]
  ]
  
  
  let found-enemy intelligent-get-belief "target" != nobody and member? intelligent-get-belief "target" enemies
  
  ;; Si l'on ne cible pas déjà un enemi
  ;; on en cherche un a cibler
  if not found-enemy
  [
    set found-enemy choose-enemy-to-target-in-vision
    if not found-enemy
    [ choose-enemy-to-target-in-knowledge ]
  ]
  
  if found-enemy
  [
    shoot-target-drones
  ]
  
  set elapsed-time elapsed-time + 1
end

to attaque2-drones
  let me self
  ;; Détermination de l'ennemi à viser
  let convoi-suivi intelligent-get-belief "convoi-suivi"
  let enemies-in-sight [sort-on [distance convoi-suivi] enemies with [not dead?] in-radius-nowrap 5] of convoi-suivi
  if empty? enemies-in-sight
  [
    let tail-cortege intelligent-get-belief "tail-cortege"
    set enemies-in-sight [sort-on [distance tail-cortege] enemies with [not dead?] in-radius-nowrap 5] of tail-cortege
  ]
  if empty? enemies-in-sight [ stop ]
  let to-kill first enemies-in-sight
  
  
  ;; Détermination du drone attaquant
  let team turtle-set intelligent-get-belief "drone-protect team"
  let maximum -1
  let info-drone nobody
  let ammos-tmp 0
  let drone-attacker nobody
  foreach sort team
  [
    if ? != self
    [
      set info-drone K-get-Info-Drone ?
      set ammos-tmp K-get "ammos" info-drone
      if distance ? <= communication-radius-drones and ammos-tmp > maximum
      [
        set maximum ammos-tmp
        set drone-attacker ?
      ]
    ]
  ]
  
  if maximum <= 0
  [
    set maximum ammos
    set drone-attacker self
  ]
  
  ;let drone-attacker last sort-on [ammos] team
  
  ;; S'il a encore des munitions,
  ;; le drone sélectionné tire sur
  ;; l'ennemi choisi
  if maximum > 0
  [
    ask drone-attacker [ shoot-enemy-drones to-kill ]
  ]
end 

;; choose-enemy-to-target-in-vision
;; ---
;; Choisi un ennemi à cibler, parmi les ennemis en vu
;; Renvoie si un ennemi à été trouvé
to-report choose-enemy-to-target-in-vision
  if statu = "protect-convoi"
  [
    if not attacker [ report false ]
    
    let target-enemies enemies with [not dead?] in-radius-nowrap drones-radius-shoot
    if empty? sort target-enemies [ report false ]
    let me self
    let min-dist min [distance me] of target-enemies
    let target-enemy one-of target-enemies with [ distance me = min-dist ]
    
    intelligent-update-belief "target" target-enemy
    
    report true
  ]
  
  if statu = "explorer"
  [
    
    report false
  ]
  report false
end

;; choose-enemy-to-target-in-knowledge
;; ---
;; Choisi un ennemi à cibler, parmi les ennemis connus
to choose-enemy-to-target-in-knowledge
  if statu = "protect-convoi"
  [
    if not attacker [ stop ]
    
    let minimum max-pxcor
    let nearest-pos nobody
    foreach intelligent-get-belief "K-Infos-Enemies"
    [
      let center intelligent-get-belief "convoi-suivi"
      if center = nobody
      [ set center self ]
      let dist [distance K-get "position" ?] of center
      if dist < drones-radius-shoot
      and minimum > dist
      and not K-get "dead" ?
      [
        set minimum dist
        set nearest-pos K-get "position" ?
      ]
    ]
    
    if nearest-pos != nobody
    [
      intelligent-update-belief "target" nearest-pos
    ]
    
    stop 
  ]
  
  if statu = "explorer"
  [
    
    stop
  ]
end

;; shoot-target-drones
;; ---
;; Le drone tire sur l'ennemi, s'il est à "bout protant"
;; et qu'il lui restant au moins une munition
to shoot-target-drones
  if ammos <= 0 [ stop ]
  if elapsed-time > reload-time [
    if distance intelligent-get-belief "target" < drones-radius-shoot
    [
      sound:play-note "GUNSHOT" 60 64 1
      set elapsed-time 0
      
      ;if random 100 < ammos-accuracy
      ;[
        ask intelligent-get-belief "target"
        [
          set hp hp - ammos-degats
          set ammos ammos - 1
        ]
      ;]
    ]
  ]
end

;; shoot-enemy-drones
;; ---
;; Le drone tire sur l'ennemi indiqué, s'il est à "bout protant"
;; et qu'il lui restant au moins une munition
;; • to-shoot  : L'ennemi sur lequel tirer
to shoot-enemy-drones [ to-shoot ]
  if ammos <= 0 [ stop ]
  if distance to-shoot < drones-radius-shoot
  [
    sound:play-note "GUNSHOT" 60 64 1
    set elapsed-time 0
    
    ;if random 100 < ammos-accuracy
    ;[
      ask to-shoot
      [
        set hp hp - ammos-degats-drones
      ]
      set ammos ammos - 1
    ;]
  ]
end