;;;;;;;;;;;;;;;;;;;;
;; Drone Explorer ;;
;;;;;;;;;;;;;;;;;;;;

to ancre-I-Mouvement end

;; explore-drones
;; ---
;; Exploration du terrain
;; Le drone cherche une zone qui n'a pas été explorée depuis un certain temps
;; S'il n'en trouve pas, il bouge aléatoirement
to explore-drones
  let center intelligent-get-belief "target"
  ;; Si le drone n'a pas de cible
  if center = nobody
  [
    ;; Récupération des zones (représentés par leur patch central)
    let liste center-to-explore-drones
    if not empty? liste
    [
      intelligent-update-belief "target" one-of liste
    ]
  ]
  
  ifelse center != nobody
  [
    go-to-patch-to-explore-drones
  ]
  [
    random-move-nowrap-drones
  ]
end

to-report explore-drones-done
  report false
end

;; center-to-explore-drones
;; ---
;; Retourne la liste des zones qui n'ont pas été explorées depuis un certain temps
to-report center-to-explore-drones
  let etat-terrain intelligent-get-belief "etat terrain"
  let liste-patches center-zones-drones
  let liste []
  let center nobody
  foreach liste-patches
  [
    set center item (position ? etat-terrain + 1) etat-terrain
    if ticks - center >= time-to-check-zone
    [
      set liste lput ? liste
    ]
  ]
  report liste
end

;; go-to-patch-to-explore-drones
;; ---
;; Le drone se dirige vers la zone, et l'explore
to go-to-patch-to-explore-drones
  let center zone-of-path-drones intelligent-get-belief "target"
  let etat-terrain intelligent-get-belief "etat terrain"
;  if max (list (abs ([pxcor] of center - xcor)) (abs ([pycor] of center - ycor))) > floor (taille-zone-drones / 2)
  let current-center zone-of-path-drones patch-here
  ifelse current-center != center
  [
    suivi-target-drones
    
    ;let pos position current-center etat-terrain
    ;intelligent-update-belief "etat terrain" lput ticks (lput current-center remove-item pos (remove-item (pos + 1 ) etat-terrain))
  ]
  [
    check-zone-drones
  ]
end

;; zone-of-path-drones
;; ---
;; the-patch : Le patch à analyser
;; Renvoie la zone dans laquelle se trouve le patch donné
to-report zone-of-path-drones [the-patch]
  let p patch (floor ([pxcor] of the-patch / taille-zone-drones) mod floor (max-pxcor / taille-zone-drones + 1) * taille-zone-drones + (floor taille-zone-drones / 2) - 1)
              (floor ([pycor] of the-patch / taille-zone-drones) mod floor (max-pxcor / taille-zone-drones + 1) * taille-zone-drones + (floor taille-zone-drones / 2) - 1 ) 0
  report p
end

;; setup-etat-terrain-drones
;; ---
;; Renvoie la liste des etats initiaux des zones
to-report setup-etat-terrain-drones
  let liste []
  foreach sort patches with [not obstacle? and pxcor - (floor (pxcor / taille-zone-drones)) * taille-zone-drones  = floor (taille-zone-drones / 2) and pycor - (floor (pycor / taille-zone-drones)) * taille-zone-drones = floor (taille-zone-drones / 2) and pzcor = 0]
  [
    set liste lput (- time-to-check-zone) lput ? liste
  ]
  report liste
end

;; center-zones-drones
;; ---
;; Renvoie la liste des zones (représentés par leurs patchs centrals)
to-report center-zones-drones
  report sort patches with [ not obstacle? and pxcor - (floor (pxcor / taille-zone-drones)) * taille-zone-drones  = floor (taille-zone-drones / 2) and pycor - (floor (pycor / taille-zone-drones)) * taille-zone-drones = floor (taille-zone-drones / 2) and pzcor = 0]
end

;; check-zone-drones
;; ---
;; Vérifie la zone dans laquelle est le drone
to check-zone-drones
  let target intelligent-get-belief "target"
  let center zone-of-path-drones intelligent-get-belief "target"
  
  ;; Si l'on a atteind le check point
  let zcor-tmp [pzcor] of target
  let tmp patch xcor ycor zcor-tmp
  ifelse [distance-nowrap [patch xcor ycor zcor-tmp] of myself] of target < 1
  [
    let counter intelligent-get-belief "explorator-check-counter"
    ;; Si l'on n'a pas encore bien parcouru la zone
    ;; Le drone se fixe un autre check point
    ifelse counter < 4
    [
      set color random 100
      set zcor-tmp zcor
      let li patches with [ not obstacle? and zone-of-path-drones self = center and pzcor = floor zcor-tmp ]
      set target item random count li sort li
      intelligent-update-belief "explorator-check-counter" counter + 1
      intelligent-update-belief "target" target
    ]
    ;; Sinon, le drone recherche une autre zone a explorer
    [
      ;; Mise a jour de l'état du terrain
      ;; La zone vient d'être explorée
      let etat-terrain intelligent-get-belief "etat terrain"
      let pos position center etat-terrain
      intelligent-update-belief "etat terrain" lput ticks (lput center remove-item pos (remove-item (pos + 1 ) etat-terrain))
      
      intelligent-update-belief "explorator-check-counter" 0
      intelligent-update-belief "target" nobody
    ]
  ]
  ;; Sinon, le drone essaie d'atteindre le check point
  [
    suivi-target-drones
  ]
end