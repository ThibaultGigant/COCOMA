;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Drones | Fonctions générales ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to ancre-I-Utilitaires
end

;; Fonctions utilitaires
;; ---
;; • at-base-drones            : Renvoie si le drone est à la base
;; • distance-min-drones       : Vérifie si le drone est trop proche d'un autre

to-report at-base-drones
  ;report abs ([pxcor] of intelligent-get-belief "base-patch" - xcor ) + abs ([pycor] of intelligent-get-belief "base-patch" - ycor ) = 0
  report distance-nowrap-noZAxis self intelligent-get-belief "base-patch" <= 0.3
  ;report [distance-nowrap myself] of intelligent-get-belief "base-patch" <= 0.3 + (zcor - solAlt)
  ;report min [distance-nowrap myself] of patches with [ base? ] <= 1
end

to-report distance-min-drones
  if count drones < 2 [ report false ]
  ; Calcul de l'angle avec la cible
  let other-drone first sort-on [distance-nowrap myself] other drones
  if [distance myself] of other-drone > min-distance-drones [ report false ]
  
  ; Si le drone se trouve au même endroit que l'autre drone (modulo l'altitude)
  if [xcor] of other-drone = xcor and [ycor] of other-drone = ycor [
       report false
  ]
  
  ; Si on arrive là, le drone est près d'un autre, on le fait tourner pour éviter l'autre drone, et on avance
  let headingFlag (towards-nowrap other-drone)
  let dirCorrection subtract-headings headingFlag heading
  
  
  if dirCorrection < 120 and dirCorrection > 0[
    lt 10
    fuel-consomme "rotation" 10
    
    fd-drones speed
  ]
  if dirCorrection > -120 and dirCorrection < 0[
    rt 10
    fuel-consomme "rotation" 10
    
    fd-drones speed
  ]
  report true
end

to ancre-II-Carburant
end

;; Fonctions liées au carburant
;; ---
;; • check-fuel-drones          : Vérifie s'il y a encore assez de fuel pour revenir à la base
;; • fuel-consomme              : Met-à-jour le niveau de carburant du drones en fonction de ses actions

;; Vérification du carburant
to check-fuel-drones
  let inten intention-name get-intention
  
  if inten = "ravitaillement-drones"
  or inten = "landing-drones"
  or inten = "reload-drones" 
  [ stop ]
  
  ;; Le patch de la base la plus proche
  let tmp first sort-on [distance-nowrap myself] patches with [ base? ]
  
  
  ;; Estimation du carburant nécesasire pour rentrer à la base
  ;; • pourcentage-securite-fuel-drones       : Donne une marge de sécurité
  ;; ---
  ;; Calcul
  ;; • Le drone se déplace jusqu'à la base (fuel-consomme "fd")   : distance-nowrap myself
  ;; • Le drone se tourne vers la base (fuel-consomme "rotate")   : abs subtract-headings toward-nowrap tmp heading /30
  ;; • Le drone flotte dans les airs (fuel-consomme "floating")   : 0.25 / speed (le flottement coût un quart moins cher)
  ;; • Le drone aterri (fuel-consomne "landing")                  : (zcor - solAlt) / 2
  ;; • Le drone se laisse une marge                               : pourcentage-securite-fuel-drones
  ;; • La puissance moteur du drone est prise en compte           : puissance-moteur-drones
  let rotation 0
;  if abs (xcor - [pxcor] of tmp) + abs (ycor - [pycor] of tmp) != 0
;  [ 
;    set rotation (abs (subtract-headings towards-nowrap tmp heading)) / 30
;  ]
  ;let fuel-estimate ;( [distance-nowrap myself] of tmp * ( 1 + 0.25 / speed) + (zcor - solAlt) / 5 + rotation + (zcor - solAlt) / 2 )
                    ;* (1.1 + pourcentage-securite-fuel-drones) * puissance-moteur-drones

  ;; Vérification du carburant restant
  if fuel < fuel-estimate [
    ;; Le drone garde en mémoire la place de la base la plus proche
    intelligent-update-belief "old-target" intelligent-get-belief "target"
    intelligent-update-belief "target" tmp
    intelligent-update-belief "base-patch" tmp
    
    ;; Fin du comportement principal, le drone doit se ravitailler
    set my-path []
    let this-intention get-intention
    add-intention "take-off-drones" "take-off-drones-done"
    add-intention "reload-drones" "reload-drones-done"
    add-intention "landing-drones" "landing-drones-done"
    add-intention "ravitaillement-drones" "ravitaillement-drones-done"
    ]
end

;; fuel-estimate
;; ---
;; Estimation du carburant nécesasire pour rentrer à la base
;; • pourcentage-securite-fuel-drones       : Donne une marge de sécurité
;; ---
;; Calcul
;; • Le drone se déplace jusqu'à la base (fuel-consomme "fd")   : distance-nowrap myself
;; • Le drone se tourne vers la base (fuel-consomme "rotate")   : abs subtract-headings toward-nowrap tmp heading /30
;; • Le drone flotte dans les airs (fuel-consomme "floating")   : 0.25 / speed (le flottement coût un quart moins cher)
;; • Le drone aterri (fuel-consomne "landing")                  : (zcor - solAlt) / 2
;; • Le drone se laisse une marge                               : pourcentage-securite-fuel-drones
;; • La puissance moteur du drone est prise en compte           : puissance-moteur-drones
to-report fuel-estimate
  ;; Le patch de la base la plus proche
  let tmp first sort-on [distance-nowrap myself] patches with [ base? ]
  let rotation 0
;  if abs (xcor - [pxcor] of tmp) + abs (ycor - [pycor] of tmp) != 0
;  [ 
;    set rotation (abs (subtract-headings towards-nowrap tmp heading)) / 30
;  ]
  report ( [distance-nowrap myself] of tmp * ( 1 + 0.25 / speed) + (zcor - solAlt) / 5 + rotation + (zcor - solAlt) / 2 )
         * (1.1 + pourcentage-securite-fuel-drones) * puissance-moteur-drones
end

;; Comsomation de carburant
;; ---
;; La consommation dépend de la puissance des moteurs du drone,
;; ainsi que du type de l'action / du mouvement
;; ---
;; • mouv                 : Type de l'action effectué
;;   ---- Types
;;        • "fd"          : Le drone a avancé devant lui (coût étalon, par mètre)
;;        • "rotation"    : Le drone a effectué une rotation (coûte trois fois moins cher, pour 10 degrés)
;;        • "take-off"    : Le drone décolle (ou prend de l'altitude) (coûte 1.5 fois plus cher, par mètre)
;;        • "landing"     : Le drone aterri (ou perd de l'altitude) (coûte 5 fois moins cher, par mètre)
;;        • "floating"    : Le drone reste sur place (on ne cumule avec un autre type) (coûte 4 fois moins cher, par tick)
;;   ----
;; • nb                   : Valeur associé à l'action (de combien de mètres le drone a avancé, etc)
to fuel-consomme [ mouv nb ]  
  if mouv = "fd"
  [ set fuel fuel - nb  * puissance-moteur-drones ]
  
  if mouv = "rotation"
  [ set fuel fuel - (nb / 30) * puissance-moteur-drones ]
  
  if mouv = "take-off"
  [ set fuel fuel - (nb * 1.5)  * puissance-moteur-drones ]
  
  if mouv = "landing"
  [ set fuel fuel - (nb / 5)  * puissance-moteur-drones ]
  
  if mouv = "floating"
  [ set fuel fuel - (1 / 4)  * puissance-moteur-drones ]
  
end

to ancre-III-Mouvements
end

;; Mouvements
;; ---
;; • fd-drones       : Fait avancer les drones, prend en compte le nowrap et les limites de map.
;;                     Prise en compte du carburant consommé
;; • rotate-drone    : Tourne la tête du drone vers l'endroit indiqué, avec une vitesse limité.
;;                     Prise en compte du carburant consommé
;; • sinusoid-traget : Donne au drone un mouvement sinusoïdale

;; Fait avancer les drones, prend en compte le nowrap et les limites de map.
;; Prise en compte du carburant consommé
;; ---
;; • sp  : La distance à laquelle on veut faire avancer le drone
to fd-drones [ sp ]
  ifelse [distance-nowrap myself] of patch-ahead sp < sp + 5 [
    fd sp
    
    fuel-consomme "fd" sp
  ]
;  [ ifelse [distance-nowrap myself] of patch-ahead sp / 5 < sp / 5 + 5 [
;      fd sp / 5
  [ ifelse [distance-nowrap myself] of patch-ahead sp < sp + 5 [
      fd sp
      
      fuel-consomme "fd" sp
    ]
    [
      ifelse heading >= 180 [ rt 20 ]
      [ lt 20 ]
      
      ;; Carburant consommé (un rotation vaut trois fois moins qu'un déplacement)
      
      fuel-consomme "rotation" 20
    ]
  ]
end

;; Tourne la tête du drone vers l'endroit indiqué, avec une vitesse limité.
;; Prise en compte du carburant consommé
;; ---
;; • goal  : L'endroit vers lequelle on souhaite que le drone se tourne
to rotate-drone [ goal ]
  ; Si le drone se trouve à l'endroit souhaité (modulo l'altitude)
  if (is-turtle? goal and [xcor] of goal = xcor and [ycor]  of goal = ycor) or 
     (is-patch? goal and [pxcor] of goal = xcor and [pycor] of goal = ycor) [
       stop
  ]
  
  ; Calcul de l'angle avec la cible
  let headingFlag (towards-nowrap goal)
  let dirCorrection subtract-headings headingFlag heading
  
  ; Arrondissement de l'angle (on ne veut pas faire de micro tournant)
  set dirCorrection precision dirCorrection 2
  
  ; Limite de l'angle, pour que ce soit plus realiste
  ifelse dirCorrection > max-dir [ ; limite a droite
    set dirCorrection max-dir
  ]
  [
    if dirCorrection < max-dir * -1 [ ; limite a gauche
      set dirCorrection max-dir * -1
    ]
  ]
  
  ; On tourne
  rt dirCorrection
;  fuel-consomme "rotation" dirCorrection
end

; Mouvement randomisé, principalement pour le début de la simulation
to random-move-nowrap-drones
  ;; Changement de cap selon probabilité
  ;; Choix vers la gauche ou la droite
  if random 100 < 5 
  [
    let turn random max-dir * one-of [ 1 -1 ]
    lt turn
;    fuel-consomme "rotation" turn
  ]
  fd-drones speed
end

;; suivi-target-drones
;; ---
;; Le drone suit le convoi qu'il souhaite protéger
to suivi-target-drones
  if intelligent-get-belief "target" != nobody [
    ;; S'il y a un chemin a suivre
    if not empty? my-path
    [
      ;; Récupération du patch ciblé
      let target-patch intelligent-get-belief "target"
      ;; Si target est un agent, on récupère un patch
      if member? target-patch turtles
      [
        let zcor-tmp zcor
        set target-patch [patch xcor ycor zcor-tmp] of target-patch
      ]
      
      ;; On ne calcule un chemin que si c'est nécessaire : obstacle entre soi et la target
      ifelse detect-obstacle-between-target-no-angle target-patch
      [
        move-to-target-astar-drones
        stop
      ]
      [
        set my-path []
      ]
    ]
    
    if not distance-min-drones [
      ; Rotation
      rotate-agent intelligent-get-belief "target"
    ]
    ; Déplacement
    if distance-nowrap intelligent-get-belief "target" > drones-suivi-radius [ fd-drones speed ]
  ]
end

;; sinusoid-traget
;; ---
;; Donne au drone un mouvement sinusoïdale
;; • a      : Le point de départ du centre de la sinusoïde
;; • b      : Le point de fin du centre de la sinusoïde
;; • taille : Taille du mouvement
to sinusoid-traget [a b taille]
;  let dist a-b 0
;  ifelse dist > 0.8 * taille
;  [
;    set heading heading - 110
;  ]
;  [
;    if dist > 0
;  ]
;  
;  let delta-angle acos (dist / taille)
end

;; search-ways-drones
;; ---
;; Decide d'un chemin a suivre si le drone a une cible
to search-ways-drones
  ; Pour chaque drone avec une cible et qui n'est pas mort, on choisit un chemin
  foreach sort-on [who] turtle-set drones with [not dead? and intelligent-get-belief "target" != nobody and empty? my-path] [
    ;; Récupération du patch ciblé
    let target-patch [intelligent-get-belief "target"] of ?
    ;; Si target est un agent, on récupère un patch
    if member? target-patch turtles
    [
      let zcor-tmp [zcor] of ?
      set target-patch [patch xcor ycor zcor-tmp] of target-patch
    ]
    
    ;; On ne calcule un chemin que si c'est nécessaire : obstacle entre soi et la target
    if [detect-obstacle-between-target-no-angle target-patch] of ?
    [
      ;; Calcul du A-Star
      ;let path (plan-astar ([patch xcor ycor zcor] of ?) target-patch false)
      let path (plan-astar ([patch-here] of ?) target-patch false)
      ask ? [ set my-path path ]
    ]
  ]
end

; Mouvement le long d'un chemin astar calculé précédemment
to move-to-target-astar-drones
  ; Vérification qu'on a bien un chemin astar en mémoire
  if not empty? my-path
  [
    let zcor-tmp zcor
    let next-patch [patch pxcor pycor zcor-tmp] of first my-path
    ; Deplacement vers le prochain patch
    if [distance myself] of next-patch >= speed
    [
      ; Rotation & Déplacement
      rotate-agent next-patch
      fd-drones speed
    ]
    ;; Si on a atteint ce patch, on le supprime de la liste, et on va donc continuer vers le prochain patch du chemin
    ;; On en supprime deux, pour eviter les déplacements en escalier dans une diagonale
    if [distance myself] of next-patch < speed
    [
      set my-path remove-item 0 my-path
      if debug [ show (word "Waypoint atteint: " patch-here ", prochain: " next-patch ) ]
    ]
  ]
end