;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Drones | Partage des connaissances ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; send-knowledges-drones
;; ---
;; Envoie un message aux drones visés,
;; contenant ses propres informations s'il y a eu une modification
to send-knowledges-drones
  
  if (last-role         != intention-name get-intention or
      last-isAttacked   != isAttacked or
      last-stat-of-fuel != floor (fuel / max (list fuel-estimate 50)) or
      K-drones-updated or
      K-convois-updated)
  [ set-drones-receivers ]
  
  ;; Récuperation des drones à qui envoyer le message
  let receivers []
  let liste intelligent-get-belief "K-drones-receivers"
  let new-liste liste
  foreach liste
  [
    if can-communicate-with-convoi ?
    [
      set receivers lput ? receivers
      set new-liste remove position ? new-liste new-liste
    ]
  ]
  
  intelligent-update-belief "K-drones-receivers" new-liste
  
  if empty? receivers [ stop ]
  
  
  ;; Connaissances à propos des drones
  let content create-knowledges-Infos-Drones-drones
  if content != nobody
  [
    let msg create-complete-msg receivers "knowledge" content
    send msg
  ]

  ;; Connaissances à propos des convois
  set content create-knowledges-Infos-Convois-drones
  if content != nobody
  [
    let msg create-complete-msg receivers "knowledge" content
    send msg
  ]
  
  ;; Connaissances à propos des attaquant
;  set content create-knowledges-Infos-Enemies-drones
;  if content != nobody
;  [
;    let msg create-complete-msg receivers "knowledge" content
;    send msg
;  ]
end

;; create-knowledges-Infos-Drones-drones
;; ---
;; Regroupement des connaissances
;; Ne crée un nouveau knowledge que s'il y a eu une modification concernant :
;; • Le rôle du drone
;; • La présence d'attaque ennemi
;; • L'état du carburant restant
;; • Une information sur un autre drone
to-report create-knowledges-Infos-Drones-drones
  
  let stat-of-fuel floor (fuel / fuel-estimate)
  
  if (last-role         != intention-name get-intention or
      last-isAttacked   != isAttacked or
      last-stat-of-fuel != stat-of-fuel or
      K-drones-updated)
  [  
    let content fput (list "tick" ticks "turtle" self "position" patch-here "role" statu "dead" dead? "pv" health "fuel" fuel) intelligent-get-belief "K-Infos-Drones"
    let content-convoi intelligent-get-belief "K-Infos-Convois"
    
    
    set last-role intention-name get-intention
    set last-isAttacked isAttacked
    set last-stat-of-fuel stat-of-fuel
    
    set K-drones-updated false
    
    report (list "K-Infos-Drones" content)
  ]
  
  report nobody
end

;; create-knowledges-Infos-Convois-drones
;; ---
;; Regroupement des connaissances
;; Ne crée un nouveau knowledge que s'il y a eu une modification concernant :
;; • Le rôle du drone
;; • La présence d'attaque ennemi
;; • L'état du carburant restant
;; • Une information sur un autre convois
to-report create-knowledges-Infos-Convois-drones
  let me turtle who
  let liste-convois []
  if ticks mod 10 = 0
  [
    let infos-convois intelligent-get-belief "K-Infos-Convois"
    let info-convoi []
    foreach sort convois with [distance me <= drones-vision-radius and myself != [intelligent-get-belief "target"] of me]
    [
      set info-convoi K-get-Info-Convoi ?
      if not empty? info-convoi and K-get "tick" info-convoi + 20 > ticks
      [
        set liste-convois lput ? liste-convois
        
        ifelse member? info-convoi infos-convois
        [
          let pos position info-convoi infos-convois
          intelligent-update-belief "K-Infos-Convois" lput ? remove-item pos infos-convois
        ]
        [
          intelligent-update-belief "K-Infos-Convois" lput ? infos-convois
        ]
        set K-convois-updated true
      ]
    ]
  ]
  
  if (not empty? liste-convois or
      true or
      true or
      K-convois-updated)
  [
    set K-convois-updated false
    
    report (list "K-Infos-Convois" intelligent-get-belief "K-Infos-Convois")
  ]
  
  report nobody
end

;; get-receivers-drones
;; ---
;; Récupère les destinataires du message de partage des connaissances des drones
;; • to-communicate            : Si vrai, renvoie seulement les agents dans le champs de communication
;;                               Sinon, renvoie tous les agents qui doivent recevoir le message
;; ---
;; • drone-protect
;; • • leader                  : Envoie à toute son équipe, aux autres drones leader, et au convoi leader
;; • • Sinon                   : Envoie à son leader s'il en a un, sinon ??? TODO
to-report get-receivers-drones [to-communicate]
  let role intelligent-get-belief "role"
  
  if role = "drone-protect"
  [
    if leader?
    [
      let other-leaders other drones with [ leader? and (not to-communicate or can-communicate-with-convoi self) ]
      let team intelligent-get-belief "drone-protect team"
      if not empty? team
      [ set team remove-item 0 team ]
      
      ifelse intelligent-get-belief "target" != nobody and not member? intelligent-get-belief "target" patches
      [ report sort (sentence other-leaders team intelligent-get-belief "target") ]
      [ report sort (sentence other-leaders team) ]
    ]
    
    if intelligent-get-belief "drone-protect leader" != nobody
    [
      let leader intelligent-get-belief "drone-protect leader"
      if leader = nobody
      [
        ;; TODO envoyer des info à d'autres s'il le faut
        report []
      ]
      report (list leader)
    ]
    
    report sort other drones with [ can-communicate-with-convoi self ]
  ]
end

;; K-drones-updated
;; ---
;; Ajoute à la liste des receivers les agents qui devronts recevoir les updates
to set-drones-receivers
  intelligent-update-belief "K-drones-receivers" get-receivers-drones false
end