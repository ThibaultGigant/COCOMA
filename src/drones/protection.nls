;;;;;;;;;;;;;;;;;;;;;;;;
;; Drones protecteurs ;;
;;;;;;;;;;;;;;;;;;;;;;;;

to ancre-I-Enrollement
end

;; Enrollement
;; ---
;; • cherche-convoi-drones               : Le drone cherche un convoi à proteger
;; • demande-au-convoi-drones            : Le drone demande au convoi s'il veut de sa protection
;; • demande-envoyee-drones              : Le drone attend la réponse du convoi
;; • demande-au-leader-drones            : Le drone demande au leader s'il veut qu'il participe à la protection
;; • demande--au-leader-envoyee-drones   : Le drone attend la réponse du leader

;; cherche-convoi-drones
;; ---
;; Le drone cherche un convoi à proteger
to cherche-convoi-drones
  suivi-convoi-drones
  
  if intelligent-get-belief "target" = nobody
  [
    random-move-nowrap-drones
  ]
  
  enrollement-cherche-convoi
end

to-report cherche-convoi-drones-done
  if intelligent-get-belief "etat enrollement" != "cherche convoi"
  [
    add-intention "demande-au-convoi-drones" "demande-au-convoi-drones-done"
    report true
  ]
  report false
end

;; demande-au-convoi-drones
;; ---
;; Le drone demande au convoi s'il veut de sa protection
to demande-au-convoi-drones
  suivi-convoi-drones
  
  enrollement-demande-au-convoi
end

to-report demande-au-convoi-drones-done
  if intelligent-get-belief "counter enrollement" >= 30
  [
    intelligent-update-belief "etat enrollement" "cherche convoi"
    intelligent-update-belief "target" nobody
    add-intention "cherche-convoi-drones" "cherche-convoi-drones-done"
    report true
  ]
  if intelligent-get-belief "etat enrollement" != "demande au convoi"
  [
    ifelse intelligent-get-belief "etat enrollement" = "demande envoyee"
    [ add-intention "demande-envoyee-drones" "demande-envoyee-drones-done" ]
    [
      intelligent-update-belief "etat enrollement" "cherche convoi"
      intelligent-update-belief "target" nobody
      add-intention "cherche-convoi-drones" "cherche-convoi-drones-done"
    ]
    report true
  ]
  report false
end

;; demande-envoyee-drones
;; ---
;; Le drone attend la réponse du convoi
to demande-envoyee-drones
  suivi-convoi-drones
  
  enrollement-demande-envoyee
end

to-report demande-envoyee-drones-done
  if intelligent-get-belief "counter enrollement" >= 30
  [
    intelligent-update-belief "etat enrollement" "cherche convoi"
    intelligent-update-belief "target" nobody
    add-intention "cherche-convoi-drones" "cherche-convoi-drones-done"
    report true
  ]
  if intelligent-get-belief "etat enrollement" != "demande envoyee"
  [
    if intelligent-get-belief "etat enrollement" = "suivi"
    [
      add-intention "protect-convoi" "protect-convoi-done" 
      report true
    ]
    
    if intelligent-get-belief "etat enrollement" = "demande leader"
    [ 
      add-intention "demande-au-leader-drones" "demande-au-leader-drones-done"
      report true
    ]
    
    intelligent-update-belief "etat enrollement" "cherche convoi"
    intelligent-update-belief "convoi-already-protected" lput intelligent-get-belief "target" intelligent-get-belief "convoi-already-protected"
    intelligent-update-belief "target" nobody
    add-intention "cherche-convoi-drones" "cherche-convoi-drones-done"
  
    report true
  ]
  report false
end

;; demande-au-leader-drones
;; ---
;; Le drone demande au leader s'il veut qu'il participe à la protection
to demande-au-leader-drones
  suivi-convoi-drones
  
  enrollement-demande-au-leader
end

to-report demande-au-leader-drones-done
  if intelligent-get-belief "counter enrollement" >= 30
  [
    intelligent-update-belief "etat enrollement" "cherche convoi"
    intelligent-update-belief "target" nobody
    add-intention "cherche-convoi-drones" "cherche-convoi-drones-done"
    report true
  ]
  let etat intelligent-get-belief "etat enrollement"
  if etat != "demande leader"
  [
    ifelse etat = "demande envoyee au leader drone"
    [
      add-intention "demande-envoyee-au-leader" "demande-envoyee-au-leader-done"
    ]
    [
      intelligent-update-belief "etat enrollement" "cherche convoi"
      intelligent-update-belief "target" nobody
      add-intention "cherche-convoi-drones" "cherche-convoi-drones-done"
    ]
    report true
  ]
  report false
end

;; demande--au-leader-envoyee-drones
;; ---
;; Le drone attend la réponse du leader
to demande-envoyee-au-leader
  suivi-convoi-drones
  
  enrollement-demande-envoyee-au-leader
end

to-report demande-envoyee-au-leader-done
  if intelligent-get-belief "counter enrollement" >= 30
  [
    intelligent-update-belief "etat enrollement" "cherche convoi"
    intelligent-update-belief "target" nobody
    add-intention "cherche-convoi-drones" "cherche-convoi-drones-done"
    report true
  ]
  let etat intelligent-get-belief "etat enrollement"
  if etat != "demande envoyee au leader drone"
  [
    ifelse etat = "suivi"
    [ add-intention "protect-convoi" "protect-convoi-done" ]
    [
      intelligent-update-belief "etat enrollement" "cherche convoi"
      intelligent-update-belief "convoi-already-protected" lput intelligent-get-belief "target" intelligent-get-belief "convoi-already-protected"
      intelligent-update-belief "target" nobody
      add-intention "cherche-convoi-drones" "cherche-convoi-drones-done"
    ]
    
    report true
  ]
  report false
end

to ancre-II-Protection
end

;; Protection et suivi du convoi à protéger
;; ---
;; • protect-convoi                      : Le drone protège le convoi
;; • search-convoi-drones                : Le drone regarde s'il y a un convoit non protégé au alentour
;; • suivi-convoi-drones                 : Le drone suit le convoi qu'il souhaite protéger

;; protect-convoi
;; ---
;; Le drone protège le convoi
to protect-convoi
  enrollement-suivi
  
  ronde
  
  check-if-convoi-suivi-alive
  
  ;; Vérification des ennemis à proximité et sur le chemin
  ;if leader? and ticks mod 3 = 0
  ;[ check-enemies-around-convois ]
  
  ;; Détection des ennemis sur la voie
  check-if-enemies-on-path
  enemy-detected-strategy
  
  suivi-convoi-drones
    
  ;; Attaque des drones
  if leader? [ attaque2-drones ]
  
  ;; Exploration de la route du convois
  explore-path
  
end

to-report protect-convoi-done
  report false
end

to check-if-enemies-on-path
  ;; Ennemi détecté sur la voie
  let enemy-detected intelligent-get-belief "enemy-detected-on-path"
  if not leader? and enemy-detected != nobody and distance-nowrap intelligent-get-belief "drone-protect leader" <= communication-radius-drones
  [
    send create-complete-msg intelligent-get-belief "drone-protect leader" "enemy-detected" enemy-detected
    intelligent-update-belief "enemy-detected-on-path" nobody
  ]
  
  ;; On nous informe qu'un ennemi à été détecté sur la voie
  let msg get-msg-if-performative "enemy-detected"
  if msg = nobody or msg = "no_message" [ stop ]
  set enemy-detected get-content msg
  intelligent-update-belief "enemy-detected-on-path" enemy-detected
end

to check-if-convoi-suivi-alive
  let convoi-suivi intelligent-get-belief "convoi-suivi"
  
  if distance convoi-suivi <= drones-vision-radius
  and [dead?] of convoi-suivi
  [
    let liste sort-on [who] convois in-radius-nowrap drones-vision-radius
    if empty? liste
    [
      add-intention "cherche-convoi-drones" "cherche-convoi-drones-done"
      remove-intention get-intention
      set leader? false
      intelligent-update-belief "drone-protect team" []
      intelligent-update-belief "drone-protect leader" nobody
      stop
    ]
    let new-convoi-suivi first liste
    if intelligent-get-belief "target" = intelligent-get-belief "convoi-suivi"
    [
      intelligent-update-belief "target" new-convoi-suivi
    ]
    intelligent-update-belief "convoi-suivi" new-convoi-suivi
  ]
end

;; search-convoi-drones
;; ---
;; Le drone regarde s'il y a un convoit non protégé au alentour
to search-convoi-drones
  let flag true
  
  let targets []
  ifelse empty? intelligent-get-belief "convoi-already-protected"
  [ 
    set targets convois with [leader? and not dead?] in-radius-nowrap vision-radius
  ]
  [ 
    let li intelligent-get-belief "convoi-already-protected"
    set targets convois with [leader? and not dead? and not member? self li ] in-radius-nowrap vision-radius
  ]
  
  ifelse count targets = 0 [
    intelligent-update-belief "target" nobody
  ]
  [
    intelligent-update-belief "target" first sort-on [distance-nowrap myself] targets
    intelligent-update-belief "convoi-suivi" intelligent-get-belief "target"
  ]
end

;; suivi-convoi-drones
;; ---
;; Le drone suit le convoi qu'il souhaite protéger
to suivi-convoi-drones
  if intelligent-get-belief "target" = nobody [
    search-convoi-drones
  ]
  
  ;; Si le convoi n'est pas visible, on suit la dernière position connue
  let convoi-suivi intelligent-get-belief "target"
  ifelse convoi-suivi != nobody and not member? convoi-suivi patches
  [
    if [distance myself] of convoi-suivi > drones-vision-radius
    [
      let last-seen K-get-Info-Convoi convoi-suivi
      ifelse last-seen != nobody and last-seen != []
      [
        intelligent-update-belief "target" K-get "position" last-seen
      ]
      [
        intelligent-update-belief "target" nobody
      ]
    ]
  ]
  [
    let zcor-tmp zcor
    
    if distance [patch pxcor pycor zcor-tmp ] of convoi-suivi < 1
    [  intelligent-update-belief "target" intelligent-get-belief "convoi-suivi" ]
  ]
  
  suivi-target-drones
end

;; ronde
;; ---
;; Fait faire une ronde autour du convoi
to ronde
  if not attacker
  [
    let convoi-suivi intelligent-get-belief "convoi-suivi"
    if convoi-suivi = nobody [ stop ]
    let diff 90 - heading - towards-nowrap convoi-suivi
;    if diff > 30
;    [
;      lt 5
;      fuel-consomme "rotation" 5
;      fd-drones speed
;      fuel-consomme "fd" speed
;    ]
    if diff < -15
    [
      rt 10
      fuel-consomme "rotation" 10
      
      if abs (heading - [heading] of intelligent-get-belief "convoi-suivi") < 80
      [
        fd-drones speed
        fuel-consomme "fd" speed
      ]
    ]
  ]
end

;; explore-path
;; ---
;; Explore la route du convoi
to explore-path
  ;; C'est le leader qui coordonne
  if leader?
  [
    let team-attacker filter [[attacker] of ? and [distance myself] of ? < communication-radius-drones ] intelligent-get-belief "drone-protect team"
    if empty? team-attacker [ stop ]
    let explorateur one-of team-attacker
    let convoi-suivi intelligent-get-belief "convoi-suivi"
    
    let me self
    
    if random 20 = 0 and [intelligent-get-belief "target"] of explorateur = convoi-suivi
    [
      let path item ([who] of convoi-suivi - min [who] of convois) as-path
      if not empty? path
      [
        set path sublist path min (list 10 length path) min (list 50 length path)
        ask explorateur [
          set my-path path
          set follow-path true
          intelligent-update-belief "target" last path
          ;intelligent-update-belief "target" one-of (patch-set path) with [ distance-nowrap me < drones-vision-radius / 2 ]
        ]
      ]
    ]
  ]
end